// Code generated by goa v3.14.0, DO NOT EDIT.
//
// profile client HTTP transport
//
// Command:
// $ goa gen profile/design

package client

import (
	"context"
	"net/http"

	goahttp "goa.design/goa/v3/http"
	goa "goa.design/goa/v3/pkg"
)

// Client lists the profile service endpoint HTTP clients.
type Client struct {
	// CreateUser Doer is the HTTP client used to make requests to the CreateUser
	// endpoint.
	CreateUserDoer goahttp.Doer

	// DeleteUser Doer is the HTTP client used to make requests to the DeleteUser
	// endpoint.
	DeleteUserDoer goahttp.Doer

	// FindByID Doer is the HTTP client used to make requests to the FindByID
	// endpoint.
	FindByIDDoer goahttp.Doer

	// UpdateUsername Doer is the HTTP client used to make requests to the
	// UpdateUsername endpoint.
	UpdateUsernameDoer goahttp.Doer

	// UpdateBio Doer is the HTTP client used to make requests to the UpdateBio
	// endpoint.
	UpdateBioDoer goahttp.Doer

	// RestoreResponseBody controls whether the response bodies are reset after
	// decoding so they can be read again.
	RestoreResponseBody bool

	scheme  string
	host    string
	encoder func(*http.Request) goahttp.Encoder
	decoder func(*http.Response) goahttp.Decoder
}

// NewClient instantiates HTTP clients for all the profile service servers.
func NewClient(
	scheme string,
	host string,
	doer goahttp.Doer,
	enc func(*http.Request) goahttp.Encoder,
	dec func(*http.Response) goahttp.Decoder,
	restoreBody bool,
) *Client {
	return &Client{
		CreateUserDoer:      doer,
		DeleteUserDoer:      doer,
		FindByIDDoer:        doer,
		UpdateUsernameDoer:  doer,
		UpdateBioDoer:       doer,
		RestoreResponseBody: restoreBody,
		scheme:              scheme,
		host:                host,
		decoder:             dec,
		encoder:             enc,
	}
}

// CreateUser returns an endpoint that makes HTTP requests to the profile
// service CreateUser server.
func (c *Client) CreateUser() goa.Endpoint {
	var (
		encodeRequest  = EncodeCreateUserRequest(c.encoder)
		decodeResponse = DecodeCreateUserResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v any) (any, error) {
		req, err := c.BuildCreateUserRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		err = encodeRequest(req, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.CreateUserDoer.Do(req)
		if err != nil {
			return nil, goahttp.ErrRequestError("profile", "CreateUser", err)
		}
		return decodeResponse(resp)
	}
}

// DeleteUser returns an endpoint that makes HTTP requests to the profile
// service DeleteUser server.
func (c *Client) DeleteUser() goa.Endpoint {
	var (
		encodeRequest  = EncodeDeleteUserRequest(c.encoder)
		decodeResponse = DecodeDeleteUserResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v any) (any, error) {
		req, err := c.BuildDeleteUserRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		err = encodeRequest(req, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.DeleteUserDoer.Do(req)
		if err != nil {
			return nil, goahttp.ErrRequestError("profile", "DeleteUser", err)
		}
		return decodeResponse(resp)
	}
}

// FindByID returns an endpoint that makes HTTP requests to the profile service
// FindByID server.
func (c *Client) FindByID() goa.Endpoint {
	var (
		decodeResponse = DecodeFindByIDResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v any) (any, error) {
		req, err := c.BuildFindByIDRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.FindByIDDoer.Do(req)
		if err != nil {
			return nil, goahttp.ErrRequestError("profile", "FindByID", err)
		}
		return decodeResponse(resp)
	}
}

// UpdateUsername returns an endpoint that makes HTTP requests to the profile
// service UpdateUsername server.
func (c *Client) UpdateUsername() goa.Endpoint {
	var (
		encodeRequest  = EncodeUpdateUsernameRequest(c.encoder)
		decodeResponse = DecodeUpdateUsernameResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v any) (any, error) {
		req, err := c.BuildUpdateUsernameRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		err = encodeRequest(req, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.UpdateUsernameDoer.Do(req)
		if err != nil {
			return nil, goahttp.ErrRequestError("profile", "UpdateUsername", err)
		}
		return decodeResponse(resp)
	}
}

// UpdateBio returns an endpoint that makes HTTP requests to the profile
// service UpdateBio server.
func (c *Client) UpdateBio() goa.Endpoint {
	var (
		encodeRequest  = EncodeUpdateBioRequest(c.encoder)
		decodeResponse = DecodeUpdateBioResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v any) (any, error) {
		req, err := c.BuildUpdateBioRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		err = encodeRequest(req, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.UpdateBioDoer.Do(req)
		if err != nil {
			return nil, goahttp.ErrRequestError("profile", "UpdateBio", err)
		}
		return decodeResponse(resp)
	}
}
