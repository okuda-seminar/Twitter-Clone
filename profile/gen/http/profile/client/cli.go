// Code generated by goa v3.14.0, DO NOT EDIT.
//
// profile HTTP client CLI support package
//
// Command:
// $ goa gen profile/design

package client

import (
	"encoding/json"
	"fmt"
	profile "profile/gen/profile"
	"strconv"
)

// BuildCreateUserPayload builds the payload for the profile CreateUser
// endpoint from CLI flags.
func BuildCreateUserPayload(profileCreateUserBody string) (*profile.CreateUserPayload, error) {
	var err error
	var body CreateUserRequestBody
	{
		err = json.Unmarshal([]byte(profileCreateUserBody), &body)
		if err != nil {
			return nil, fmt.Errorf("invalid JSON for body, \nerror: %s, \nexample of valid JSON:\n%s", err, "'{\n      \"username\": \"Nobis cum ut.\"\n   }'")
		}
	}
	v := &profile.CreateUserPayload{
		Username: body.Username,
	}

	return v, nil
}

// BuildDeleteUserPayload builds the payload for the profile DeleteUser
// endpoint from CLI flags.
func BuildDeleteUserPayload(profileDeleteUserBody string) (*profile.DeleteUserPayload, error) {
	var err error
	var body DeleteUserRequestBody
	{
		err = json.Unmarshal([]byte(profileDeleteUserBody), &body)
		if err != nil {
			return nil, fmt.Errorf("invalid JSON for body, \nerror: %s, \nexample of valid JSON:\n%s", err, "'{\n      \"id\": 7452933893943473380\n   }'")
		}
	}
	v := &profile.DeleteUserPayload{
		ID: body.ID,
	}

	return v, nil
}

// BuildFindByIDPayload builds the payload for the profile FindByID endpoint
// from CLI flags.
func BuildFindByIDPayload(profileFindByIDID string) (*profile.FindByIDPayload, error) {
	var err error
	var id int
	{
		var v int64
		v, err = strconv.ParseInt(profileFindByIDID, 10, strconv.IntSize)
		id = int(v)
		if err != nil {
			return nil, fmt.Errorf("invalid value for id, must be INT")
		}
	}
	v := &profile.FindByIDPayload{}
	v.ID = id

	return v, nil
}

// BuildUpdateUsernamePayload builds the payload for the profile UpdateUsername
// endpoint from CLI flags.
func BuildUpdateUsernamePayload(profileUpdateUsernameBody string, profileUpdateUsernameID string) (*profile.UpdateUsernamePayload, error) {
	var err error
	var body UpdateUsernameRequestBody
	{
		err = json.Unmarshal([]byte(profileUpdateUsernameBody), &body)
		if err != nil {
			return nil, fmt.Errorf("invalid JSON for body, \nerror: %s, \nexample of valid JSON:\n%s", err, "'{\n      \"username\": \"Accusamus ipsum aut magnam.\"\n   }'")
		}
	}
	var id int
	{
		var v int64
		v, err = strconv.ParseInt(profileUpdateUsernameID, 10, strconv.IntSize)
		id = int(v)
		if err != nil {
			return nil, fmt.Errorf("invalid value for id, must be INT")
		}
	}
	v := &profile.UpdateUsernamePayload{
		Username: body.Username,
	}
	v.ID = id

	return v, nil
}

// BuildUpdateBioPayload builds the payload for the profile UpdateBio endpoint
// from CLI flags.
func BuildUpdateBioPayload(profileUpdateBioBody string) (*profile.UpdateBioPayload, error) {
	var err error
	var body UpdateBioRequestBody
	{
		err = json.Unmarshal([]byte(profileUpdateBioBody), &body)
		if err != nil {
			return nil, fmt.Errorf("invalid JSON for body, \nerror: %s, \nexample of valid JSON:\n%s", err, "'{\n      \"bio\": \"Accusamus incidunt.\",\n      \"id\": 3611385067649777069\n   }'")
		}
	}
	v := &profile.UpdateBioPayload{
		ID:  body.ID,
		Bio: body.Bio,
	}

	return v, nil
}
