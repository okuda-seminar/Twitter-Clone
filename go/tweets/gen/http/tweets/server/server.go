// Code generated by goa v3.15.2, DO NOT EDIT.
//
// tweets HTTP server
//
// Command:
// $ goa gen tweets/design

package server

import (
	"context"
	"net/http"
	tweets "tweets/gen/tweets"

	goahttp "goa.design/goa/v3/http"
	goa "goa.design/goa/v3/pkg"
)

// Server lists the tweets service endpoint HTTP handlers.
type Server struct {
	Mounts             []*MountPoint
	CreateTweet        http.Handler
	DeleteTweet        http.Handler
	LikeTweet          http.Handler
	DeleteTweetLike    http.Handler
	Retweet            http.Handler
	DeleteRetweet      http.Handler
	Reply              http.Handler
	DeleteReply        http.Handler
	GenHTTPOpenapiJSON http.Handler
}

// MountPoint holds information about the mounted endpoints.
type MountPoint struct {
	// Method is the name of the service method served by the mounted HTTP handler.
	Method string
	// Verb is the HTTP method used to match requests to the mounted handler.
	Verb string
	// Pattern is the HTTP request path pattern used to match requests to the
	// mounted handler.
	Pattern string
}

// New instantiates HTTP handlers for all the tweets service endpoints using
// the provided encoder and decoder. The handlers are mounted on the given mux
// using the HTTP verb and path defined in the design. errhandler is called
// whenever a response fails to be encoded. formatter is used to format errors
// returned by the service methods prior to encoding. Both errhandler and
// formatter are optional and can be nil.
func New(
	e *tweets.Endpoints,
	mux goahttp.Muxer,
	decoder func(*http.Request) goahttp.Decoder,
	encoder func(context.Context, http.ResponseWriter) goahttp.Encoder,
	errhandler func(context.Context, http.ResponseWriter, error),
	formatter func(ctx context.Context, err error) goahttp.Statuser,
	fileSystemGenHTTPOpenapiJSON http.FileSystem,
) *Server {
	if fileSystemGenHTTPOpenapiJSON == nil {
		fileSystemGenHTTPOpenapiJSON = http.Dir(".")
	}
	return &Server{
		Mounts: []*MountPoint{
			{"CreateTweet", "POST", "/api/tweets"},
			{"DeleteTweet", "DELETE", "/api/tweets"},
			{"LikeTweet", "POST", "/api/tweets/like"},
			{"DeleteTweetLike", "DELETE", "/api/tweets/like"},
			{"Retweet", "POST", "/api/tweets/retweet"},
			{"DeleteRetweet", "DELETE", "/api/tweets/retweet"},
			{"Reply", "POST", "/api/tweets/reply"},
			{"DeleteReply", "DELETE", "/api/tweets/reply"},
			{"./gen/http/openapi.json", "GET", "/swagger.json"},
		},
		CreateTweet:        NewCreateTweetHandler(e.CreateTweet, mux, decoder, encoder, errhandler, formatter),
		DeleteTweet:        NewDeleteTweetHandler(e.DeleteTweet, mux, decoder, encoder, errhandler, formatter),
		LikeTweet:          NewLikeTweetHandler(e.LikeTweet, mux, decoder, encoder, errhandler, formatter),
		DeleteTweetLike:    NewDeleteTweetLikeHandler(e.DeleteTweetLike, mux, decoder, encoder, errhandler, formatter),
		Retweet:            NewRetweetHandler(e.Retweet, mux, decoder, encoder, errhandler, formatter),
		DeleteRetweet:      NewDeleteRetweetHandler(e.DeleteRetweet, mux, decoder, encoder, errhandler, formatter),
		Reply:              NewReplyHandler(e.Reply, mux, decoder, encoder, errhandler, formatter),
		DeleteReply:        NewDeleteReplyHandler(e.DeleteReply, mux, decoder, encoder, errhandler, formatter),
		GenHTTPOpenapiJSON: http.FileServer(fileSystemGenHTTPOpenapiJSON),
	}
}

// Service returns the name of the service served.
func (s *Server) Service() string { return "tweets" }

// Use wraps the server handlers with the given middleware.
func (s *Server) Use(m func(http.Handler) http.Handler) {
	s.CreateTweet = m(s.CreateTweet)
	s.DeleteTweet = m(s.DeleteTweet)
	s.LikeTweet = m(s.LikeTweet)
	s.DeleteTweetLike = m(s.DeleteTweetLike)
	s.Retweet = m(s.Retweet)
	s.DeleteRetweet = m(s.DeleteRetweet)
	s.Reply = m(s.Reply)
	s.DeleteReply = m(s.DeleteReply)
}

// MethodNames returns the methods served.
func (s *Server) MethodNames() []string { return tweets.MethodNames[:] }

// Mount configures the mux to serve the tweets endpoints.
func Mount(mux goahttp.Muxer, h *Server) {
	MountCreateTweetHandler(mux, h.CreateTweet)
	MountDeleteTweetHandler(mux, h.DeleteTweet)
	MountLikeTweetHandler(mux, h.LikeTweet)
	MountDeleteTweetLikeHandler(mux, h.DeleteTweetLike)
	MountRetweetHandler(mux, h.Retweet)
	MountDeleteRetweetHandler(mux, h.DeleteRetweet)
	MountReplyHandler(mux, h.Reply)
	MountDeleteReplyHandler(mux, h.DeleteReply)
	MountGenHTTPOpenapiJSON(mux, goahttp.Replace("", "/./gen/http/openapi.json", h.GenHTTPOpenapiJSON))
}

// Mount configures the mux to serve the tweets endpoints.
func (s *Server) Mount(mux goahttp.Muxer) {
	Mount(mux, s)
}

// MountCreateTweetHandler configures the mux to serve the "tweets" service
// "CreateTweet" endpoint.
func MountCreateTweetHandler(mux goahttp.Muxer, h http.Handler) {
	f, ok := h.(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("POST", "/api/tweets", f)
}

// NewCreateTweetHandler creates a HTTP handler which loads the HTTP request
// and calls the "tweets" service "CreateTweet" endpoint.
func NewCreateTweetHandler(
	endpoint goa.Endpoint,
	mux goahttp.Muxer,
	decoder func(*http.Request) goahttp.Decoder,
	encoder func(context.Context, http.ResponseWriter) goahttp.Encoder,
	errhandler func(context.Context, http.ResponseWriter, error),
	formatter func(ctx context.Context, err error) goahttp.Statuser,
) http.Handler {
	var (
		decodeRequest  = DecodeCreateTweetRequest(mux, decoder)
		encodeResponse = EncodeCreateTweetResponse(encoder)
		encodeError    = EncodeCreateTweetError(encoder, formatter)
	)
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := context.WithValue(r.Context(), goahttp.AcceptTypeKey, r.Header.Get("Accept"))
		ctx = context.WithValue(ctx, goa.MethodKey, "CreateTweet")
		ctx = context.WithValue(ctx, goa.ServiceKey, "tweets")
		payload, err := decodeRequest(r)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		res, err := endpoint(ctx, payload)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		if err := encodeResponse(ctx, w, res); err != nil {
			errhandler(ctx, w, err)
		}
	})
}

// MountDeleteTweetHandler configures the mux to serve the "tweets" service
// "DeleteTweet" endpoint.
func MountDeleteTweetHandler(mux goahttp.Muxer, h http.Handler) {
	f, ok := h.(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("DELETE", "/api/tweets", f)
}

// NewDeleteTweetHandler creates a HTTP handler which loads the HTTP request
// and calls the "tweets" service "DeleteTweet" endpoint.
func NewDeleteTweetHandler(
	endpoint goa.Endpoint,
	mux goahttp.Muxer,
	decoder func(*http.Request) goahttp.Decoder,
	encoder func(context.Context, http.ResponseWriter) goahttp.Encoder,
	errhandler func(context.Context, http.ResponseWriter, error),
	formatter func(ctx context.Context, err error) goahttp.Statuser,
) http.Handler {
	var (
		decodeRequest  = DecodeDeleteTweetRequest(mux, decoder)
		encodeResponse = EncodeDeleteTweetResponse(encoder)
		encodeError    = EncodeDeleteTweetError(encoder, formatter)
	)
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := context.WithValue(r.Context(), goahttp.AcceptTypeKey, r.Header.Get("Accept"))
		ctx = context.WithValue(ctx, goa.MethodKey, "DeleteTweet")
		ctx = context.WithValue(ctx, goa.ServiceKey, "tweets")
		payload, err := decodeRequest(r)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		res, err := endpoint(ctx, payload)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		if err := encodeResponse(ctx, w, res); err != nil {
			errhandler(ctx, w, err)
		}
	})
}

// MountLikeTweetHandler configures the mux to serve the "tweets" service
// "LikeTweet" endpoint.
func MountLikeTweetHandler(mux goahttp.Muxer, h http.Handler) {
	f, ok := h.(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("POST", "/api/tweets/like", f)
}

// NewLikeTweetHandler creates a HTTP handler which loads the HTTP request and
// calls the "tweets" service "LikeTweet" endpoint.
func NewLikeTweetHandler(
	endpoint goa.Endpoint,
	mux goahttp.Muxer,
	decoder func(*http.Request) goahttp.Decoder,
	encoder func(context.Context, http.ResponseWriter) goahttp.Encoder,
	errhandler func(context.Context, http.ResponseWriter, error),
	formatter func(ctx context.Context, err error) goahttp.Statuser,
) http.Handler {
	var (
		decodeRequest  = DecodeLikeTweetRequest(mux, decoder)
		encodeResponse = EncodeLikeTweetResponse(encoder)
		encodeError    = EncodeLikeTweetError(encoder, formatter)
	)
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := context.WithValue(r.Context(), goahttp.AcceptTypeKey, r.Header.Get("Accept"))
		ctx = context.WithValue(ctx, goa.MethodKey, "LikeTweet")
		ctx = context.WithValue(ctx, goa.ServiceKey, "tweets")
		payload, err := decodeRequest(r)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		res, err := endpoint(ctx, payload)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		if err := encodeResponse(ctx, w, res); err != nil {
			errhandler(ctx, w, err)
		}
	})
}

// MountDeleteTweetLikeHandler configures the mux to serve the "tweets" service
// "DeleteTweetLike" endpoint.
func MountDeleteTweetLikeHandler(mux goahttp.Muxer, h http.Handler) {
	f, ok := h.(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("DELETE", "/api/tweets/like", f)
}

// NewDeleteTweetLikeHandler creates a HTTP handler which loads the HTTP
// request and calls the "tweets" service "DeleteTweetLike" endpoint.
func NewDeleteTweetLikeHandler(
	endpoint goa.Endpoint,
	mux goahttp.Muxer,
	decoder func(*http.Request) goahttp.Decoder,
	encoder func(context.Context, http.ResponseWriter) goahttp.Encoder,
	errhandler func(context.Context, http.ResponseWriter, error),
	formatter func(ctx context.Context, err error) goahttp.Statuser,
) http.Handler {
	var (
		decodeRequest  = DecodeDeleteTweetLikeRequest(mux, decoder)
		encodeResponse = EncodeDeleteTweetLikeResponse(encoder)
		encodeError    = EncodeDeleteTweetLikeError(encoder, formatter)
	)
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := context.WithValue(r.Context(), goahttp.AcceptTypeKey, r.Header.Get("Accept"))
		ctx = context.WithValue(ctx, goa.MethodKey, "DeleteTweetLike")
		ctx = context.WithValue(ctx, goa.ServiceKey, "tweets")
		payload, err := decodeRequest(r)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		res, err := endpoint(ctx, payload)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		if err := encodeResponse(ctx, w, res); err != nil {
			errhandler(ctx, w, err)
		}
	})
}

// MountRetweetHandler configures the mux to serve the "tweets" service
// "Retweet" endpoint.
func MountRetweetHandler(mux goahttp.Muxer, h http.Handler) {
	f, ok := h.(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("POST", "/api/tweets/retweet", f)
}

// NewRetweetHandler creates a HTTP handler which loads the HTTP request and
// calls the "tweets" service "Retweet" endpoint.
func NewRetweetHandler(
	endpoint goa.Endpoint,
	mux goahttp.Muxer,
	decoder func(*http.Request) goahttp.Decoder,
	encoder func(context.Context, http.ResponseWriter) goahttp.Encoder,
	errhandler func(context.Context, http.ResponseWriter, error),
	formatter func(ctx context.Context, err error) goahttp.Statuser,
) http.Handler {
	var (
		decodeRequest  = DecodeRetweetRequest(mux, decoder)
		encodeResponse = EncodeRetweetResponse(encoder)
		encodeError    = EncodeRetweetError(encoder, formatter)
	)
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := context.WithValue(r.Context(), goahttp.AcceptTypeKey, r.Header.Get("Accept"))
		ctx = context.WithValue(ctx, goa.MethodKey, "Retweet")
		ctx = context.WithValue(ctx, goa.ServiceKey, "tweets")
		payload, err := decodeRequest(r)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		res, err := endpoint(ctx, payload)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		if err := encodeResponse(ctx, w, res); err != nil {
			errhandler(ctx, w, err)
		}
	})
}

// MountDeleteRetweetHandler configures the mux to serve the "tweets" service
// "DeleteRetweet" endpoint.
func MountDeleteRetweetHandler(mux goahttp.Muxer, h http.Handler) {
	f, ok := h.(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("DELETE", "/api/tweets/retweet", f)
}

// NewDeleteRetweetHandler creates a HTTP handler which loads the HTTP request
// and calls the "tweets" service "DeleteRetweet" endpoint.
func NewDeleteRetweetHandler(
	endpoint goa.Endpoint,
	mux goahttp.Muxer,
	decoder func(*http.Request) goahttp.Decoder,
	encoder func(context.Context, http.ResponseWriter) goahttp.Encoder,
	errhandler func(context.Context, http.ResponseWriter, error),
	formatter func(ctx context.Context, err error) goahttp.Statuser,
) http.Handler {
	var (
		decodeRequest  = DecodeDeleteRetweetRequest(mux, decoder)
		encodeResponse = EncodeDeleteRetweetResponse(encoder)
		encodeError    = EncodeDeleteRetweetError(encoder, formatter)
	)
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := context.WithValue(r.Context(), goahttp.AcceptTypeKey, r.Header.Get("Accept"))
		ctx = context.WithValue(ctx, goa.MethodKey, "DeleteRetweet")
		ctx = context.WithValue(ctx, goa.ServiceKey, "tweets")
		payload, err := decodeRequest(r)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		res, err := endpoint(ctx, payload)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		if err := encodeResponse(ctx, w, res); err != nil {
			errhandler(ctx, w, err)
		}
	})
}

// MountReplyHandler configures the mux to serve the "tweets" service "Reply"
// endpoint.
func MountReplyHandler(mux goahttp.Muxer, h http.Handler) {
	f, ok := h.(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("POST", "/api/tweets/reply", f)
}

// NewReplyHandler creates a HTTP handler which loads the HTTP request and
// calls the "tweets" service "Reply" endpoint.
func NewReplyHandler(
	endpoint goa.Endpoint,
	mux goahttp.Muxer,
	decoder func(*http.Request) goahttp.Decoder,
	encoder func(context.Context, http.ResponseWriter) goahttp.Encoder,
	errhandler func(context.Context, http.ResponseWriter, error),
	formatter func(ctx context.Context, err error) goahttp.Statuser,
) http.Handler {
	var (
		decodeRequest  = DecodeReplyRequest(mux, decoder)
		encodeResponse = EncodeReplyResponse(encoder)
		encodeError    = EncodeReplyError(encoder, formatter)
	)
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := context.WithValue(r.Context(), goahttp.AcceptTypeKey, r.Header.Get("Accept"))
		ctx = context.WithValue(ctx, goa.MethodKey, "Reply")
		ctx = context.WithValue(ctx, goa.ServiceKey, "tweets")
		payload, err := decodeRequest(r)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		res, err := endpoint(ctx, payload)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		if err := encodeResponse(ctx, w, res); err != nil {
			errhandler(ctx, w, err)
		}
	})
}

// MountDeleteReplyHandler configures the mux to serve the "tweets" service
// "DeleteReply" endpoint.
func MountDeleteReplyHandler(mux goahttp.Muxer, h http.Handler) {
	f, ok := h.(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("DELETE", "/api/tweets/reply", f)
}

// NewDeleteReplyHandler creates a HTTP handler which loads the HTTP request
// and calls the "tweets" service "DeleteReply" endpoint.
func NewDeleteReplyHandler(
	endpoint goa.Endpoint,
	mux goahttp.Muxer,
	decoder func(*http.Request) goahttp.Decoder,
	encoder func(context.Context, http.ResponseWriter) goahttp.Encoder,
	errhandler func(context.Context, http.ResponseWriter, error),
	formatter func(ctx context.Context, err error) goahttp.Statuser,
) http.Handler {
	var (
		decodeRequest  = DecodeDeleteReplyRequest(mux, decoder)
		encodeResponse = EncodeDeleteReplyResponse(encoder)
		encodeError    = EncodeDeleteReplyError(encoder, formatter)
	)
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := context.WithValue(r.Context(), goahttp.AcceptTypeKey, r.Header.Get("Accept"))
		ctx = context.WithValue(ctx, goa.MethodKey, "DeleteReply")
		ctx = context.WithValue(ctx, goa.ServiceKey, "tweets")
		payload, err := decodeRequest(r)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		res, err := endpoint(ctx, payload)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		if err := encodeResponse(ctx, w, res); err != nil {
			errhandler(ctx, w, err)
		}
	})
}

// MountGenHTTPOpenapiJSON configures the mux to serve GET request made to
// "/swagger.json".
func MountGenHTTPOpenapiJSON(mux goahttp.Muxer, h http.Handler) {
	mux.Handle("GET", "/swagger.json", h.ServeHTTP)
}
