// Code generated by goa v3.15.2, DO NOT EDIT.
//
// tweets client HTTP transport
//
// Command:
// $ goa gen tweets/design

package client

import (
	"context"
	"net/http"

	goahttp "goa.design/goa/v3/http"
	goa "goa.design/goa/v3/pkg"
)

// Client lists the tweets service endpoint HTTP clients.
type Client struct {
	// CreatePost Doer is the HTTP client used to make requests to the CreatePost
	// endpoint.
	CreatePostDoer goahttp.Doer

	// DeleteTweet Doer is the HTTP client used to make requests to the DeleteTweet
	// endpoint.
	DeleteTweetDoer goahttp.Doer

	// LikeTweet Doer is the HTTP client used to make requests to the LikeTweet
	// endpoint.
	LikeTweetDoer goahttp.Doer

	// DeleteTweetLike Doer is the HTTP client used to make requests to the
	// DeleteTweetLike endpoint.
	DeleteTweetLikeDoer goahttp.Doer

	// Retweet Doer is the HTTP client used to make requests to the Retweet
	// endpoint.
	RetweetDoer goahttp.Doer

	// DeleteRetweet Doer is the HTTP client used to make requests to the
	// DeleteRetweet endpoint.
	DeleteRetweetDoer goahttp.Doer

	// CreateReply Doer is the HTTP client used to make requests to the CreateReply
	// endpoint.
	CreateReplyDoer goahttp.Doer

	// DeleteReply Doer is the HTTP client used to make requests to the DeleteReply
	// endpoint.
	DeleteReplyDoer goahttp.Doer

	// RestoreResponseBody controls whether the response bodies are reset after
	// decoding so they can be read again.
	RestoreResponseBody bool

	scheme  string
	host    string
	encoder func(*http.Request) goahttp.Encoder
	decoder func(*http.Response) goahttp.Decoder
}

// NewClient instantiates HTTP clients for all the tweets service servers.
func NewClient(
	scheme string,
	host string,
	doer goahttp.Doer,
	enc func(*http.Request) goahttp.Encoder,
	dec func(*http.Response) goahttp.Decoder,
	restoreBody bool,
) *Client {
	return &Client{
		CreatePostDoer:      doer,
		DeleteTweetDoer:     doer,
		LikeTweetDoer:       doer,
		DeleteTweetLikeDoer: doer,
		RetweetDoer:         doer,
		DeleteRetweetDoer:   doer,
		CreateReplyDoer:     doer,
		DeleteReplyDoer:     doer,
		RestoreResponseBody: restoreBody,
		scheme:              scheme,
		host:                host,
		decoder:             dec,
		encoder:             enc,
	}
}

// CreatePost returns an endpoint that makes HTTP requests to the tweets
// service CreatePost server.
func (c *Client) CreatePost() goa.Endpoint {
	var (
		encodeRequest  = EncodeCreatePostRequest(c.encoder)
		decodeResponse = DecodeCreatePostResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v any) (any, error) {
		req, err := c.BuildCreatePostRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		err = encodeRequest(req, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.CreatePostDoer.Do(req)
		if err != nil {
			return nil, goahttp.ErrRequestError("tweets", "CreatePost", err)
		}
		return decodeResponse(resp)
	}
}

// DeleteTweet returns an endpoint that makes HTTP requests to the tweets
// service DeleteTweet server.
func (c *Client) DeleteTweet() goa.Endpoint {
	var (
		encodeRequest  = EncodeDeleteTweetRequest(c.encoder)
		decodeResponse = DecodeDeleteTweetResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v any) (any, error) {
		req, err := c.BuildDeleteTweetRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		err = encodeRequest(req, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.DeleteTweetDoer.Do(req)
		if err != nil {
			return nil, goahttp.ErrRequestError("tweets", "DeleteTweet", err)
		}
		return decodeResponse(resp)
	}
}

// LikeTweet returns an endpoint that makes HTTP requests to the tweets service
// LikeTweet server.
func (c *Client) LikeTweet() goa.Endpoint {
	var (
		encodeRequest  = EncodeLikeTweetRequest(c.encoder)
		decodeResponse = DecodeLikeTweetResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v any) (any, error) {
		req, err := c.BuildLikeTweetRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		err = encodeRequest(req, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.LikeTweetDoer.Do(req)
		if err != nil {
			return nil, goahttp.ErrRequestError("tweets", "LikeTweet", err)
		}
		return decodeResponse(resp)
	}
}

// DeleteTweetLike returns an endpoint that makes HTTP requests to the tweets
// service DeleteTweetLike server.
func (c *Client) DeleteTweetLike() goa.Endpoint {
	var (
		encodeRequest  = EncodeDeleteTweetLikeRequest(c.encoder)
		decodeResponse = DecodeDeleteTweetLikeResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v any) (any, error) {
		req, err := c.BuildDeleteTweetLikeRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		err = encodeRequest(req, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.DeleteTweetLikeDoer.Do(req)
		if err != nil {
			return nil, goahttp.ErrRequestError("tweets", "DeleteTweetLike", err)
		}
		return decodeResponse(resp)
	}
}

// Retweet returns an endpoint that makes HTTP requests to the tweets service
// Retweet server.
func (c *Client) Retweet() goa.Endpoint {
	var (
		encodeRequest  = EncodeRetweetRequest(c.encoder)
		decodeResponse = DecodeRetweetResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v any) (any, error) {
		req, err := c.BuildRetweetRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		err = encodeRequest(req, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.RetweetDoer.Do(req)
		if err != nil {
			return nil, goahttp.ErrRequestError("tweets", "Retweet", err)
		}
		return decodeResponse(resp)
	}
}

// DeleteRetweet returns an endpoint that makes HTTP requests to the tweets
// service DeleteRetweet server.
func (c *Client) DeleteRetweet() goa.Endpoint {
	var (
		encodeRequest  = EncodeDeleteRetweetRequest(c.encoder)
		decodeResponse = DecodeDeleteRetweetResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v any) (any, error) {
		req, err := c.BuildDeleteRetweetRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		err = encodeRequest(req, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.DeleteRetweetDoer.Do(req)
		if err != nil {
			return nil, goahttp.ErrRequestError("tweets", "DeleteRetweet", err)
		}
		return decodeResponse(resp)
	}
}

// CreateReply returns an endpoint that makes HTTP requests to the tweets
// service CreateReply server.
func (c *Client) CreateReply() goa.Endpoint {
	var (
		encodeRequest  = EncodeCreateReplyRequest(c.encoder)
		decodeResponse = DecodeCreateReplyResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v any) (any, error) {
		req, err := c.BuildCreateReplyRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		err = encodeRequest(req, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.CreateReplyDoer.Do(req)
		if err != nil {
			return nil, goahttp.ErrRequestError("tweets", "CreateReply", err)
		}
		return decodeResponse(resp)
	}
}

// DeleteReply returns an endpoint that makes HTTP requests to the tweets
// service DeleteReply server.
func (c *Client) DeleteReply() goa.Endpoint {
	var (
		encodeRequest  = EncodeDeleteReplyRequest(c.encoder)
		decodeResponse = DecodeDeleteReplyResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v any) (any, error) {
		req, err := c.BuildDeleteReplyRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		err = encodeRequest(req, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.DeleteReplyDoer.Do(req)
		if err != nil {
			return nil, goahttp.ErrRequestError("tweets", "DeleteReply", err)
		}
		return decodeResponse(resp)
	}
}
