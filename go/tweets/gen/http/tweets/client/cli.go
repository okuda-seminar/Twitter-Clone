// Code generated by goa v3.15.2, DO NOT EDIT.
//
// tweets HTTP client CLI support package
//
// Command:
// $ goa gen tweets/design

package client

import (
	"encoding/json"
	"fmt"
	tweets "tweets/gen/tweets"

	goa "goa.design/goa/v3/pkg"
)

// BuildCreateTweetPayload builds the payload for the tweets CreateTweet
// endpoint from CLI flags.
func BuildCreateTweetPayload(tweetsCreateTweetBody string) (*tweets.CreateTweetPayload, error) {
	var err error
	var body CreateTweetRequestBody
	{
		err = json.Unmarshal([]byte(tweetsCreateTweetBody), &body)
		if err != nil {
			return nil, fmt.Errorf("invalid JSON for body, \nerror: %s, \nexample of valid JSON:\n%s", err, "'{\n      \"text\": \"Dolores omnis ut rerum.\",\n      \"user_id\": \"db7770ce-2fed-11ef-b440-b2d74bfa9f65\"\n   }'")
		}
		err = goa.MergeErrors(err, goa.ValidateFormat("body.user_id", body.UserID, goa.FormatUUID))
		if err != nil {
			return nil, err
		}
	}
	v := &tweets.CreateTweetPayload{
		UserID: body.UserID,
		Text:   body.Text,
	}

	return v, nil
}

// BuildDeleteTweetPayload builds the payload for the tweets DeleteTweet
// endpoint from CLI flags.
func BuildDeleteTweetPayload(tweetsDeleteTweetBody string) (*tweets.DeleteTweetPayload, error) {
	var err error
	var body DeleteTweetRequestBody
	{
		err = json.Unmarshal([]byte(tweetsDeleteTweetBody), &body)
		if err != nil {
			return nil, fmt.Errorf("invalid JSON for body, \nerror: %s, \nexample of valid JSON:\n%s", err, "'{\n      \"id\": \"db779130-2fed-11ef-b440-b2d74bfa9f65\"\n   }'")
		}
		err = goa.MergeErrors(err, goa.ValidateFormat("body.id", body.ID, goa.FormatUUID))
		if err != nil {
			return nil, err
		}
	}
	v := &tweets.DeleteTweetPayload{
		ID: body.ID,
	}

	return v, nil
}

// BuildLikeTweetPayload builds the payload for the tweets LikeTweet endpoint
// from CLI flags.
func BuildLikeTweetPayload(tweetsLikeTweetBody string) (*tweets.LikeTweetPayload, error) {
	var err error
	var body LikeTweetRequestBody
	{
		err = json.Unmarshal([]byte(tweetsLikeTweetBody), &body)
		if err != nil {
			return nil, fmt.Errorf("invalid JSON for body, \nerror: %s, \nexample of valid JSON:\n%s", err, "'{\n      \"tweet_id\": \"db77a580-2fed-11ef-b440-b2d74bfa9f65\",\n      \"user_id\": \"db77a698-2fed-11ef-b440-b2d74bfa9f65\"\n   }'")
		}
		err = goa.MergeErrors(err, goa.ValidateFormat("body.tweet_id", body.TweetID, goa.FormatUUID))
		err = goa.MergeErrors(err, goa.ValidateFormat("body.user_id", body.UserID, goa.FormatUUID))
		if err != nil {
			return nil, err
		}
	}
	v := &tweets.LikeTweetPayload{
		TweetID: body.TweetID,
		UserID:  body.UserID,
	}

	return v, nil
}

// BuildDeleteTweetLikePayload builds the payload for the tweets
// DeleteTweetLike endpoint from CLI flags.
func BuildDeleteTweetLikePayload(tweetsDeleteTweetLikeBody string) (*tweets.DeleteTweetLikePayload, error) {
	var err error
	var body DeleteTweetLikeRequestBody
	{
		err = json.Unmarshal([]byte(tweetsDeleteTweetLikeBody), &body)
		if err != nil {
			return nil, fmt.Errorf("invalid JSON for body, \nerror: %s, \nexample of valid JSON:\n%s", err, "'{\n      \"tweet_id\": \"db77d96a-2fed-11ef-b440-b2d74bfa9f65\",\n      \"user_id\": \"db77daa0-2fed-11ef-b440-b2d74bfa9f65\"\n   }'")
		}
		err = goa.MergeErrors(err, goa.ValidateFormat("body.tweet_id", body.TweetID, goa.FormatUUID))
		err = goa.MergeErrors(err, goa.ValidateFormat("body.user_id", body.UserID, goa.FormatUUID))
		if err != nil {
			return nil, err
		}
	}
	v := &tweets.DeleteTweetLikePayload{
		TweetID: body.TweetID,
		UserID:  body.UserID,
	}

	return v, nil
}

// BuildRetweetPayload builds the payload for the tweets Retweet endpoint from
// CLI flags.
func BuildRetweetPayload(tweetsRetweetBody string) (*tweets.RetweetPayload, error) {
	var err error
	var body RetweetRequestBody
	{
		err = json.Unmarshal([]byte(tweetsRetweetBody), &body)
		if err != nil {
			return nil, fmt.Errorf("invalid JSON for body, \nerror: %s, \nexample of valid JSON:\n%s", err, "'{\n      \"tweet_id\": \"db77ee1e-2fed-11ef-b440-b2d74bfa9f65\",\n      \"user_id\": \"db77ef86-2fed-11ef-b440-b2d74bfa9f65\"\n   }'")
		}
		err = goa.MergeErrors(err, goa.ValidateFormat("body.tweet_id", body.TweetID, goa.FormatUUID))
		err = goa.MergeErrors(err, goa.ValidateFormat("body.user_id", body.UserID, goa.FormatUUID))
		if err != nil {
			return nil, err
		}
	}
	v := &tweets.RetweetPayload{
		TweetID: body.TweetID,
		UserID:  body.UserID,
	}

	return v, nil
}

// BuildDeleteRetweetPayload builds the payload for the tweets DeleteRetweet
// endpoint from CLI flags.
func BuildDeleteRetweetPayload(tweetsDeleteRetweetBody string) (*tweets.DeleteRetweetPayload, error) {
	var err error
	var body DeleteRetweetRequestBody
	{
		err = json.Unmarshal([]byte(tweetsDeleteRetweetBody), &body)
		if err != nil {
			return nil, fmt.Errorf("invalid JSON for body, \nerror: %s, \nexample of valid JSON:\n%s", err, "'{\n      \"tweet_id\": \"db78008e-2fed-11ef-b440-b2d74bfa9f65\",\n      \"user_id\": \"db7801c4-2fed-11ef-b440-b2d74bfa9f65\"\n   }'")
		}
		err = goa.MergeErrors(err, goa.ValidateFormat("body.tweet_id", body.TweetID, goa.FormatUUID))
		err = goa.MergeErrors(err, goa.ValidateFormat("body.user_id", body.UserID, goa.FormatUUID))
		if err != nil {
			return nil, err
		}
	}
	v := &tweets.DeleteRetweetPayload{
		TweetID: body.TweetID,
		UserID:  body.UserID,
	}

	return v, nil
}

// BuildCreateReplyPayload builds the payload for the tweets CreateReply
// endpoint from CLI flags.
func BuildCreateReplyPayload(tweetsCreateReplyBody string) (*tweets.CreateReplyPayload, error) {
	var err error
	var body CreateReplyRequestBody
	{
		err = json.Unmarshal([]byte(tweetsCreateReplyBody), &body)
		if err != nil {
			return nil, fmt.Errorf("invalid JSON for body, \nerror: %s, \nexample of valid JSON:\n%s", err, "'{\n      \"text\": \"Ratione dicta.\",\n      \"tweet_id\": \"db7812e0-2fed-11ef-b440-b2d74bfa9f65\",\n      \"user_id\": \"db781402-2fed-11ef-b440-b2d74bfa9f65\"\n   }'")
		}
		err = goa.MergeErrors(err, goa.ValidateFormat("body.tweet_id", body.TweetID, goa.FormatUUID))
		err = goa.MergeErrors(err, goa.ValidateFormat("body.user_id", body.UserID, goa.FormatUUID))
		if err != nil {
			return nil, err
		}
	}
	v := &tweets.CreateReplyPayload{
		TweetID: body.TweetID,
		UserID:  body.UserID,
		Text:    body.Text,
	}

	return v, nil
}

// BuildDeleteReplyPayload builds the payload for the tweets DeleteReply
// endpoint from CLI flags.
func BuildDeleteReplyPayload(tweetsDeleteReplyBody string) (*tweets.DeleteReplyPayload, error) {
	var err error
	var body DeleteReplyRequestBody
	{
		err = json.Unmarshal([]byte(tweetsDeleteReplyBody), &body)
		if err != nil {
			return nil, fmt.Errorf("invalid JSON for body, \nerror: %s, \nexample of valid JSON:\n%s", err, "'{\n      \"id\": \"db782c94-2fed-11ef-b440-b2d74bfa9f65\"\n   }'")
		}
		err = goa.MergeErrors(err, goa.ValidateFormat("body.id", body.ID, goa.FormatUUID))
		if err != nil {
			return nil, err
		}
	}
	v := &tweets.DeleteReplyPayload{
		ID: body.ID,
	}

	return v, nil
}
