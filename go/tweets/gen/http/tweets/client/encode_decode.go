// Code generated by goa v3.15.2, DO NOT EDIT.
//
// tweets HTTP client encoders and decoders
//
// Command:
// $ goa gen tweets/design

package client

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	tweets "tweets/gen/tweets"

	goahttp "goa.design/goa/v3/http"
)

// BuildCreatePostRequest instantiates a HTTP request object with method and
// path set to call the "tweets" service "CreatePost" endpoint
func (c *Client) BuildCreatePostRequest(ctx context.Context, v any) (*http.Request, error) {
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: CreatePostTweetsPath()}
	req, err := http.NewRequest("POST", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("tweets", "CreatePost", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeCreatePostRequest returns an encoder for requests sent to the tweets
// CreatePost server.
func EncodeCreatePostRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, any) error {
	return func(req *http.Request, v any) error {
		p, ok := v.(*tweets.CreatePostPayload)
		if !ok {
			return goahttp.ErrInvalidType("tweets", "CreatePost", "*tweets.CreatePostPayload", v)
		}
		body := NewCreatePostRequestBody(p)
		if err := encoder(req).Encode(&body); err != nil {
			return goahttp.ErrEncodingError("tweets", "CreatePost", err)
		}
		return nil
	}
}

// DecodeCreatePostResponse returns a decoder for responses returned by the
// tweets CreatePost endpoint. restoreBody controls whether the response body
// should be restored after having been read.
// DecodeCreatePostResponse may return the following errors:
//   - "NotFound" (type *goa.ServiceError): http.StatusNotFound
//   - "BadRequest" (type *goa.ServiceError): http.StatusBadRequest
//   - error: internal error
func DecodeCreatePostResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (any, error) {
	return func(resp *http.Response) (any, error) {
		if restoreBody {
			b, err := io.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = io.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = io.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				body CreatePostResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("tweets", "CreatePost", err)
			}
			err = ValidateCreatePostResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("tweets", "CreatePost", err)
			}
			res := NewCreatePostTweetOK(&body)
			return res, nil
		case http.StatusNotFound:
			var (
				body CreatePostNotFoundResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("tweets", "CreatePost", err)
			}
			err = ValidateCreatePostNotFoundResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("tweets", "CreatePost", err)
			}
			return nil, NewCreatePostNotFound(&body)
		case http.StatusBadRequest:
			var (
				body CreatePostBadRequestResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("tweets", "CreatePost", err)
			}
			err = ValidateCreatePostBadRequestResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("tweets", "CreatePost", err)
			}
			return nil, NewCreatePostBadRequest(&body)
		default:
			body, _ := io.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("tweets", "CreatePost", resp.StatusCode, string(body))
		}
	}
}

// BuildDeleteTweetRequest instantiates a HTTP request object with method and
// path set to call the "tweets" service "DeleteTweet" endpoint
func (c *Client) BuildDeleteTweetRequest(ctx context.Context, v any) (*http.Request, error) {
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: DeleteTweetTweetsPath()}
	req, err := http.NewRequest("DELETE", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("tweets", "DeleteTweet", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeDeleteTweetRequest returns an encoder for requests sent to the tweets
// DeleteTweet server.
func EncodeDeleteTweetRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, any) error {
	return func(req *http.Request, v any) error {
		p, ok := v.(*tweets.DeleteTweetPayload)
		if !ok {
			return goahttp.ErrInvalidType("tweets", "DeleteTweet", "*tweets.DeleteTweetPayload", v)
		}
		body := NewDeleteTweetRequestBody(p)
		if err := encoder(req).Encode(&body); err != nil {
			return goahttp.ErrEncodingError("tweets", "DeleteTweet", err)
		}
		return nil
	}
}

// DecodeDeleteTweetResponse returns a decoder for responses returned by the
// tweets DeleteTweet endpoint. restoreBody controls whether the response body
// should be restored after having been read.
// DecodeDeleteTweetResponse may return the following errors:
//   - "NotFound" (type *goa.ServiceError): http.StatusNotFound
//   - "BadRequest" (type *goa.ServiceError): http.StatusBadRequest
//   - error: internal error
func DecodeDeleteTweetResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (any, error) {
	return func(resp *http.Response) (any, error) {
		if restoreBody {
			b, err := io.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = io.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = io.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			return nil, nil
		case http.StatusNotFound:
			var (
				body DeleteTweetNotFoundResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("tweets", "DeleteTweet", err)
			}
			err = ValidateDeleteTweetNotFoundResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("tweets", "DeleteTweet", err)
			}
			return nil, NewDeleteTweetNotFound(&body)
		case http.StatusBadRequest:
			var (
				body DeleteTweetBadRequestResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("tweets", "DeleteTweet", err)
			}
			err = ValidateDeleteTweetBadRequestResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("tweets", "DeleteTweet", err)
			}
			return nil, NewDeleteTweetBadRequest(&body)
		default:
			body, _ := io.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("tweets", "DeleteTweet", resp.StatusCode, string(body))
		}
	}
}

// BuildLikeTweetRequest instantiates a HTTP request object with method and
// path set to call the "tweets" service "LikeTweet" endpoint
func (c *Client) BuildLikeTweetRequest(ctx context.Context, v any) (*http.Request, error) {
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: LikeTweetTweetsPath()}
	req, err := http.NewRequest("POST", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("tweets", "LikeTweet", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeLikeTweetRequest returns an encoder for requests sent to the tweets
// LikeTweet server.
func EncodeLikeTweetRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, any) error {
	return func(req *http.Request, v any) error {
		p, ok := v.(*tweets.LikeTweetPayload)
		if !ok {
			return goahttp.ErrInvalidType("tweets", "LikeTweet", "*tweets.LikeTweetPayload", v)
		}
		body := NewLikeTweetRequestBody(p)
		if err := encoder(req).Encode(&body); err != nil {
			return goahttp.ErrEncodingError("tweets", "LikeTweet", err)
		}
		return nil
	}
}

// DecodeLikeTweetResponse returns a decoder for responses returned by the
// tweets LikeTweet endpoint. restoreBody controls whether the response body
// should be restored after having been read.
// DecodeLikeTweetResponse may return the following errors:
//   - "BadRequest" (type *goa.ServiceError): http.StatusBadRequest
//   - error: internal error
func DecodeLikeTweetResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (any, error) {
	return func(resp *http.Response) (any, error) {
		if restoreBody {
			b, err := io.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = io.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = io.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			return nil, nil
		case http.StatusBadRequest:
			var (
				body LikeTweetBadRequestResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("tweets", "LikeTweet", err)
			}
			err = ValidateLikeTweetBadRequestResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("tweets", "LikeTweet", err)
			}
			return nil, NewLikeTweetBadRequest(&body)
		default:
			body, _ := io.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("tweets", "LikeTweet", resp.StatusCode, string(body))
		}
	}
}

// BuildDeleteTweetLikeRequest instantiates a HTTP request object with method
// and path set to call the "tweets" service "DeleteTweetLike" endpoint
func (c *Client) BuildDeleteTweetLikeRequest(ctx context.Context, v any) (*http.Request, error) {
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: DeleteTweetLikeTweetsPath()}
	req, err := http.NewRequest("DELETE", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("tweets", "DeleteTweetLike", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeDeleteTweetLikeRequest returns an encoder for requests sent to the
// tweets DeleteTweetLike server.
func EncodeDeleteTweetLikeRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, any) error {
	return func(req *http.Request, v any) error {
		p, ok := v.(*tweets.DeleteTweetLikePayload)
		if !ok {
			return goahttp.ErrInvalidType("tweets", "DeleteTweetLike", "*tweets.DeleteTweetLikePayload", v)
		}
		body := NewDeleteTweetLikeRequestBody(p)
		if err := encoder(req).Encode(&body); err != nil {
			return goahttp.ErrEncodingError("tweets", "DeleteTweetLike", err)
		}
		return nil
	}
}

// DecodeDeleteTweetLikeResponse returns a decoder for responses returned by
// the tweets DeleteTweetLike endpoint. restoreBody controls whether the
// response body should be restored after having been read.
// DecodeDeleteTweetLikeResponse may return the following errors:
//   - "BadRequest" (type *goa.ServiceError): http.StatusBadRequest
//   - error: internal error
func DecodeDeleteTweetLikeResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (any, error) {
	return func(resp *http.Response) (any, error) {
		if restoreBody {
			b, err := io.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = io.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = io.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			return nil, nil
		case http.StatusBadRequest:
			var (
				body DeleteTweetLikeBadRequestResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("tweets", "DeleteTweetLike", err)
			}
			err = ValidateDeleteTweetLikeBadRequestResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("tweets", "DeleteTweetLike", err)
			}
			return nil, NewDeleteTweetLikeBadRequest(&body)
		default:
			body, _ := io.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("tweets", "DeleteTweetLike", resp.StatusCode, string(body))
		}
	}
}

// BuildRetweetRequest instantiates a HTTP request object with method and path
// set to call the "tweets" service "Retweet" endpoint
func (c *Client) BuildRetweetRequest(ctx context.Context, v any) (*http.Request, error) {
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: RetweetTweetsPath()}
	req, err := http.NewRequest("POST", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("tweets", "Retweet", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeRetweetRequest returns an encoder for requests sent to the tweets
// Retweet server.
func EncodeRetweetRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, any) error {
	return func(req *http.Request, v any) error {
		p, ok := v.(*tweets.RetweetPayload)
		if !ok {
			return goahttp.ErrInvalidType("tweets", "Retweet", "*tweets.RetweetPayload", v)
		}
		body := NewRetweetRequestBody(p)
		if err := encoder(req).Encode(&body); err != nil {
			return goahttp.ErrEncodingError("tweets", "Retweet", err)
		}
		return nil
	}
}

// DecodeRetweetResponse returns a decoder for responses returned by the tweets
// Retweet endpoint. restoreBody controls whether the response body should be
// restored after having been read.
// DecodeRetweetResponse may return the following errors:
//   - "BadRequest" (type *goa.ServiceError): http.StatusBadRequest
//   - error: internal error
func DecodeRetweetResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (any, error) {
	return func(resp *http.Response) (any, error) {
		if restoreBody {
			b, err := io.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = io.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = io.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			return nil, nil
		case http.StatusBadRequest:
			var (
				body RetweetBadRequestResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("tweets", "Retweet", err)
			}
			err = ValidateRetweetBadRequestResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("tweets", "Retweet", err)
			}
			return nil, NewRetweetBadRequest(&body)
		default:
			body, _ := io.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("tweets", "Retweet", resp.StatusCode, string(body))
		}
	}
}

// BuildDeleteRetweetRequest instantiates a HTTP request object with method and
// path set to call the "tweets" service "DeleteRetweet" endpoint
func (c *Client) BuildDeleteRetweetRequest(ctx context.Context, v any) (*http.Request, error) {
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: DeleteRetweetTweetsPath()}
	req, err := http.NewRequest("DELETE", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("tweets", "DeleteRetweet", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeDeleteRetweetRequest returns an encoder for requests sent to the
// tweets DeleteRetweet server.
func EncodeDeleteRetweetRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, any) error {
	return func(req *http.Request, v any) error {
		p, ok := v.(*tweets.DeleteRetweetPayload)
		if !ok {
			return goahttp.ErrInvalidType("tweets", "DeleteRetweet", "*tweets.DeleteRetweetPayload", v)
		}
		body := NewDeleteRetweetRequestBody(p)
		if err := encoder(req).Encode(&body); err != nil {
			return goahttp.ErrEncodingError("tweets", "DeleteRetweet", err)
		}
		return nil
	}
}

// DecodeDeleteRetweetResponse returns a decoder for responses returned by the
// tweets DeleteRetweet endpoint. restoreBody controls whether the response
// body should be restored after having been read.
// DecodeDeleteRetweetResponse may return the following errors:
//   - "BadRequest" (type *goa.ServiceError): http.StatusBadRequest
//   - error: internal error
func DecodeDeleteRetweetResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (any, error) {
	return func(resp *http.Response) (any, error) {
		if restoreBody {
			b, err := io.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = io.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = io.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			return nil, nil
		case http.StatusBadRequest:
			var (
				body DeleteRetweetBadRequestResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("tweets", "DeleteRetweet", err)
			}
			err = ValidateDeleteRetweetBadRequestResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("tweets", "DeleteRetweet", err)
			}
			return nil, NewDeleteRetweetBadRequest(&body)
		default:
			body, _ := io.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("tweets", "DeleteRetweet", resp.StatusCode, string(body))
		}
	}
}

// BuildCreateReplyRequest instantiates a HTTP request object with method and
// path set to call the "tweets" service "CreateReply" endpoint
func (c *Client) BuildCreateReplyRequest(ctx context.Context, v any) (*http.Request, error) {
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: CreateReplyTweetsPath()}
	req, err := http.NewRequest("POST", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("tweets", "CreateReply", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeCreateReplyRequest returns an encoder for requests sent to the tweets
// CreateReply server.
func EncodeCreateReplyRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, any) error {
	return func(req *http.Request, v any) error {
		p, ok := v.(*tweets.CreateReplyPayload)
		if !ok {
			return goahttp.ErrInvalidType("tweets", "CreateReply", "*tweets.CreateReplyPayload", v)
		}
		body := NewCreateReplyRequestBody(p)
		if err := encoder(req).Encode(&body); err != nil {
			return goahttp.ErrEncodingError("tweets", "CreateReply", err)
		}
		return nil
	}
}

// DecodeCreateReplyResponse returns a decoder for responses returned by the
// tweets CreateReply endpoint. restoreBody controls whether the response body
// should be restored after having been read.
// DecodeCreateReplyResponse may return the following errors:
//   - "BadRequest" (type *goa.ServiceError): http.StatusBadRequest
//   - error: internal error
func DecodeCreateReplyResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (any, error) {
	return func(resp *http.Response) (any, error) {
		if restoreBody {
			b, err := io.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = io.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = io.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				body CreateReplyResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("tweets", "CreateReply", err)
			}
			err = ValidateCreateReplyResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("tweets", "CreateReply", err)
			}
			res := NewCreateReplyReplyOK(&body)
			return res, nil
		case http.StatusBadRequest:
			var (
				body CreateReplyBadRequestResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("tweets", "CreateReply", err)
			}
			err = ValidateCreateReplyBadRequestResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("tweets", "CreateReply", err)
			}
			return nil, NewCreateReplyBadRequest(&body)
		default:
			body, _ := io.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("tweets", "CreateReply", resp.StatusCode, string(body))
		}
	}
}

// BuildDeleteReplyRequest instantiates a HTTP request object with method and
// path set to call the "tweets" service "DeleteReply" endpoint
func (c *Client) BuildDeleteReplyRequest(ctx context.Context, v any) (*http.Request, error) {
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: DeleteReplyTweetsPath()}
	req, err := http.NewRequest("DELETE", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("tweets", "DeleteReply", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeDeleteReplyRequest returns an encoder for requests sent to the tweets
// DeleteReply server.
func EncodeDeleteReplyRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, any) error {
	return func(req *http.Request, v any) error {
		p, ok := v.(*tweets.DeleteReplyPayload)
		if !ok {
			return goahttp.ErrInvalidType("tweets", "DeleteReply", "*tweets.DeleteReplyPayload", v)
		}
		body := NewDeleteReplyRequestBody(p)
		if err := encoder(req).Encode(&body); err != nil {
			return goahttp.ErrEncodingError("tweets", "DeleteReply", err)
		}
		return nil
	}
}

// DecodeDeleteReplyResponse returns a decoder for responses returned by the
// tweets DeleteReply endpoint. restoreBody controls whether the response body
// should be restored after having been read.
// DecodeDeleteReplyResponse may return the following errors:
//   - "BadRequest" (type *goa.ServiceError): http.StatusBadRequest
//   - error: internal error
func DecodeDeleteReplyResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (any, error) {
	return func(resp *http.Response) (any, error) {
		if restoreBody {
			b, err := io.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = io.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = io.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			return nil, nil
		case http.StatusBadRequest:
			var (
				body DeleteReplyBadRequestResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("tweets", "DeleteReply", err)
			}
			err = ValidateDeleteReplyBadRequestResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("tweets", "DeleteReply", err)
			}
			return nil, NewDeleteReplyBadRequest(&body)
		default:
			body, _ := io.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("tweets", "DeleteReply", resp.StatusCode, string(body))
		}
	}
}
