// Code generated by goa v3.15.2, DO NOT EDIT.
//
// tweets HTTP client CLI support package
//
// Command:
// $ goa gen tweets/design

package cli

import (
	"flag"
	"fmt"
	"net/http"
	"os"
	tweetsc "tweets/gen/http/tweets/client"

	goahttp "goa.design/goa/v3/http"
	goa "goa.design/goa/v3/pkg"
)

// UsageCommands returns the set of commands and sub-commands using the format
//
//	command (subcommand1|subcommand2|...)
func UsageCommands() string {
	return `tweets (create-tweet|delete-tweet|like-tweet|delete-tweet-like|retweet|delete-retweet)
`
}

// UsageExamples produces an example of a valid invocation of the CLI tool.
func UsageExamples() string {
	return os.Args[0] + ` tweets create-tweet --body '{
      "text": "Ex id provident ut voluptates.",
      "user_id": "Voluptatem et amet."
   }'` + "\n" +
		""
}

// ParseEndpoint returns the endpoint and payload as specified on the command
// line.
func ParseEndpoint(
	scheme, host string,
	doer goahttp.Doer,
	enc func(*http.Request) goahttp.Encoder,
	dec func(*http.Response) goahttp.Decoder,
	restore bool,
) (goa.Endpoint, any, error) {
	var (
		tweetsFlags = flag.NewFlagSet("tweets", flag.ContinueOnError)

		tweetsCreateTweetFlags    = flag.NewFlagSet("create-tweet", flag.ExitOnError)
		tweetsCreateTweetBodyFlag = tweetsCreateTweetFlags.String("body", "REQUIRED", "")

		tweetsDeleteTweetFlags    = flag.NewFlagSet("delete-tweet", flag.ExitOnError)
		tweetsDeleteTweetBodyFlag = tweetsDeleteTweetFlags.String("body", "REQUIRED", "")

		tweetsLikeTweetFlags    = flag.NewFlagSet("like-tweet", flag.ExitOnError)
		tweetsLikeTweetBodyFlag = tweetsLikeTweetFlags.String("body", "REQUIRED", "")

		tweetsDeleteTweetLikeFlags    = flag.NewFlagSet("delete-tweet-like", flag.ExitOnError)
		tweetsDeleteTweetLikeBodyFlag = tweetsDeleteTweetLikeFlags.String("body", "REQUIRED", "")

		tweetsRetweetFlags    = flag.NewFlagSet("retweet", flag.ExitOnError)
		tweetsRetweetBodyFlag = tweetsRetweetFlags.String("body", "REQUIRED", "")

		tweetsDeleteRetweetFlags    = flag.NewFlagSet("delete-retweet", flag.ExitOnError)
		tweetsDeleteRetweetBodyFlag = tweetsDeleteRetweetFlags.String("body", "REQUIRED", "")
	)
	tweetsFlags.Usage = tweetsUsage
	tweetsCreateTweetFlags.Usage = tweetsCreateTweetUsage
	tweetsDeleteTweetFlags.Usage = tweetsDeleteTweetUsage
	tweetsLikeTweetFlags.Usage = tweetsLikeTweetUsage
	tweetsDeleteTweetLikeFlags.Usage = tweetsDeleteTweetLikeUsage
	tweetsRetweetFlags.Usage = tweetsRetweetUsage
	tweetsDeleteRetweetFlags.Usage = tweetsDeleteRetweetUsage

	if err := flag.CommandLine.Parse(os.Args[1:]); err != nil {
		return nil, nil, err
	}

	if flag.NArg() < 2 { // two non flag args are required: SERVICE and ENDPOINT (aka COMMAND)
		return nil, nil, fmt.Errorf("not enough arguments")
	}

	var (
		svcn string
		svcf *flag.FlagSet
	)
	{
		svcn = flag.Arg(0)
		switch svcn {
		case "tweets":
			svcf = tweetsFlags
		default:
			return nil, nil, fmt.Errorf("unknown service %q", svcn)
		}
	}
	if err := svcf.Parse(flag.Args()[1:]); err != nil {
		return nil, nil, err
	}

	var (
		epn string
		epf *flag.FlagSet
	)
	{
		epn = svcf.Arg(0)
		switch svcn {
		case "tweets":
			switch epn {
			case "create-tweet":
				epf = tweetsCreateTweetFlags

			case "delete-tweet":
				epf = tweetsDeleteTweetFlags

			case "like-tweet":
				epf = tweetsLikeTweetFlags

			case "delete-tweet-like":
				epf = tweetsDeleteTweetLikeFlags

			case "retweet":
				epf = tweetsRetweetFlags

			case "delete-retweet":
				epf = tweetsDeleteRetweetFlags

			}

		}
	}
	if epf == nil {
		return nil, nil, fmt.Errorf("unknown %q endpoint %q", svcn, epn)
	}

	// Parse endpoint flags if any
	if svcf.NArg() > 1 {
		if err := epf.Parse(svcf.Args()[1:]); err != nil {
			return nil, nil, err
		}
	}

	var (
		data     any
		endpoint goa.Endpoint
		err      error
	)
	{
		switch svcn {
		case "tweets":
			c := tweetsc.NewClient(scheme, host, doer, enc, dec, restore)
			switch epn {
			case "create-tweet":
				endpoint = c.CreateTweet()
				data, err = tweetsc.BuildCreateTweetPayload(*tweetsCreateTweetBodyFlag)
			case "delete-tweet":
				endpoint = c.DeleteTweet()
				data, err = tweetsc.BuildDeleteTweetPayload(*tweetsDeleteTweetBodyFlag)
			case "like-tweet":
				endpoint = c.LikeTweet()
				data, err = tweetsc.BuildLikeTweetPayload(*tweetsLikeTweetBodyFlag)
			case "delete-tweet-like":
				endpoint = c.DeleteTweetLike()
				data, err = tweetsc.BuildDeleteTweetLikePayload(*tweetsDeleteTweetLikeBodyFlag)
			case "retweet":
				endpoint = c.Retweet()
				data, err = tweetsc.BuildRetweetPayload(*tweetsRetweetBodyFlag)
			case "delete-retweet":
				endpoint = c.DeleteRetweet()
				data, err = tweetsc.BuildDeleteRetweetPayload(*tweetsDeleteRetweetBodyFlag)
			}
		}
	}
	if err != nil {
		return nil, nil, err
	}

	return endpoint, data, nil
}

// tweetsUsage displays the usage of the tweets command and its subcommands.
func tweetsUsage() {
	fmt.Fprintf(os.Stderr, `The tweets service performs operations on tweets information.
Usage:
    %[1]s [globalflags] tweets COMMAND [flags]

COMMAND:
    create-tweet: CreateTweet implements CreateTweet.
    delete-tweet: DeleteTweet implements DeleteTweet.
    like-tweet: LikeTweet implements LikeTweet.
    delete-tweet-like: DeleteTweetLike implements DeleteTweetLike.
    retweet: Retweet implements Retweet.
    delete-retweet: DeleteRetweet implements DeleteRetweet.

Additional help:
    %[1]s tweets COMMAND --help
`, os.Args[0])
}
func tweetsCreateTweetUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] tweets create-tweet -body JSON

CreateTweet implements CreateTweet.
    -body JSON: 

Example:
    %[1]s tweets create-tweet --body '{
      "text": "Ex id provident ut voluptates.",
      "user_id": "Voluptatem et amet."
   }'
`, os.Args[0])
}

func tweetsDeleteTweetUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] tweets delete-tweet -body JSON

DeleteTweet implements DeleteTweet.
    -body JSON: 

Example:
    %[1]s tweets delete-tweet --body '{
      "id": "Perspiciatis laborum perspiciatis qui dolor nemo rerum."
   }'
`, os.Args[0])
}

func tweetsLikeTweetUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] tweets like-tweet -body JSON

LikeTweet implements LikeTweet.
    -body JSON: 

Example:
    %[1]s tweets like-tweet --body '{
      "tweet_id": "Cumque iusto deleniti.",
      "user_id": "Doloremque enim dolores nisi ipsam officiis."
   }'
`, os.Args[0])
}

func tweetsDeleteTweetLikeUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] tweets delete-tweet-like -body JSON

DeleteTweetLike implements DeleteTweetLike.
    -body JSON: 

Example:
    %[1]s tweets delete-tweet-like --body '{
      "tweet_id": "Dolorem rerum libero consequuntur perferendis et.",
      "user_id": "Sed quia consequuntur quidem sunt."
   }'
`, os.Args[0])
}

func tweetsRetweetUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] tweets retweet -body JSON

Retweet implements Retweet.
    -body JSON: 

Example:
    %[1]s tweets retweet --body '{
      "tweet_id": "Sint qui voluptates excepturi sit quasi laboriosam.",
      "user_id": "Ipsa esse dolor."
   }'
`, os.Args[0])
}

func tweetsDeleteRetweetUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] tweets delete-retweet -body JSON

DeleteRetweet implements DeleteRetweet.
    -body JSON: 

Example:
    %[1]s tweets delete-retweet --body '{
      "tweet_id": "Modi doloremque explicabo.",
      "user_id": "Consequatur laudantium veritatis unde."
   }'
`, os.Args[0])
}
