// Code generated by goa v3.14.0, DO NOT EDIT.
//
// users client HTTP transport
//
// Command:
// $ goa gen users/design

package client

import (
	"context"
	"net/http"

	goahttp "goa.design/goa/v3/http"
	goa "goa.design/goa/v3/pkg"
)

// Client lists the users service endpoint HTTP clients.
type Client struct {
	// CreateUser Doer is the HTTP client used to make requests to the CreateUser
	// endpoint.
	CreateUserDoer goahttp.Doer

	// DeleteUser Doer is the HTTP client used to make requests to the DeleteUser
	// endpoint.
	DeleteUserDoer goahttp.Doer

	// FindUserByID Doer is the HTTP client used to make requests to the
	// FindUserByID endpoint.
	FindUserByIDDoer goahttp.Doer

	// UpdateProfile Doer is the HTTP client used to make requests to the
	// UpdateProfile endpoint.
	UpdateProfileDoer goahttp.Doer

	// Follow Doer is the HTTP client used to make requests to the Follow endpoint.
	FollowDoer goahttp.Doer

	// Unfollow Doer is the HTTP client used to make requests to the Unfollow
	// endpoint.
	UnfollowDoer goahttp.Doer

	// GetFollowers Doer is the HTTP client used to make requests to the
	// GetFollowers endpoint.
	GetFollowersDoer goahttp.Doer

	// GetFollowings Doer is the HTTP client used to make requests to the
	// GetFollowings endpoint.
	GetFollowingsDoer goahttp.Doer

	// Mute Doer is the HTTP client used to make requests to the Mute endpoint.
	MuteDoer goahttp.Doer

	// Unmute Doer is the HTTP client used to make requests to the Unmute endpoint.
	UnmuteDoer goahttp.Doer

	// Block Doer is the HTTP client used to make requests to the Block endpoint.
	BlockDoer goahttp.Doer

	// Unblock Doer is the HTTP client used to make requests to the Unblock
	// endpoint.
	UnblockDoer goahttp.Doer

	// RestoreResponseBody controls whether the response bodies are reset after
	// decoding so they can be read again.
	RestoreResponseBody bool

	scheme  string
	host    string
	encoder func(*http.Request) goahttp.Encoder
	decoder func(*http.Response) goahttp.Decoder
}

// NewClient instantiates HTTP clients for all the users service servers.
func NewClient(
	scheme string,
	host string,
	doer goahttp.Doer,
	enc func(*http.Request) goahttp.Encoder,
	dec func(*http.Response) goahttp.Decoder,
	restoreBody bool,
) *Client {
	return &Client{
		CreateUserDoer:      doer,
		DeleteUserDoer:      doer,
		FindUserByIDDoer:    doer,
		UpdateProfileDoer:   doer,
		FollowDoer:          doer,
		UnfollowDoer:        doer,
		GetFollowersDoer:    doer,
		GetFollowingsDoer:   doer,
		MuteDoer:            doer,
		UnmuteDoer:          doer,
		BlockDoer:           doer,
		UnblockDoer:         doer,
		RestoreResponseBody: restoreBody,
		scheme:              scheme,
		host:                host,
		decoder:             dec,
		encoder:             enc,
	}
}

// CreateUser returns an endpoint that makes HTTP requests to the users service
// CreateUser server.
func (c *Client) CreateUser() goa.Endpoint {
	var (
		encodeRequest  = EncodeCreateUserRequest(c.encoder)
		decodeResponse = DecodeCreateUserResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v any) (any, error) {
		req, err := c.BuildCreateUserRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		err = encodeRequest(req, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.CreateUserDoer.Do(req)
		if err != nil {
			return nil, goahttp.ErrRequestError("users", "CreateUser", err)
		}
		return decodeResponse(resp)
	}
}

// DeleteUser returns an endpoint that makes HTTP requests to the users service
// DeleteUser server.
func (c *Client) DeleteUser() goa.Endpoint {
	var (
		decodeResponse = DecodeDeleteUserResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v any) (any, error) {
		req, err := c.BuildDeleteUserRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.DeleteUserDoer.Do(req)
		if err != nil {
			return nil, goahttp.ErrRequestError("users", "DeleteUser", err)
		}
		return decodeResponse(resp)
	}
}

// FindUserByID returns an endpoint that makes HTTP requests to the users
// service FindUserByID server.
func (c *Client) FindUserByID() goa.Endpoint {
	var (
		decodeResponse = DecodeFindUserByIDResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v any) (any, error) {
		req, err := c.BuildFindUserByIDRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.FindUserByIDDoer.Do(req)
		if err != nil {
			return nil, goahttp.ErrRequestError("users", "FindUserByID", err)
		}
		return decodeResponse(resp)
	}
}

// UpdateProfile returns an endpoint that makes HTTP requests to the users
// service UpdateProfile server.
func (c *Client) UpdateProfile() goa.Endpoint {
	var (
		encodeRequest  = EncodeUpdateProfileRequest(c.encoder)
		decodeResponse = DecodeUpdateProfileResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v any) (any, error) {
		req, err := c.BuildUpdateProfileRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		err = encodeRequest(req, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.UpdateProfileDoer.Do(req)
		if err != nil {
			return nil, goahttp.ErrRequestError("users", "UpdateProfile", err)
		}
		return decodeResponse(resp)
	}
}

// Follow returns an endpoint that makes HTTP requests to the users service
// Follow server.
func (c *Client) Follow() goa.Endpoint {
	var (
		encodeRequest  = EncodeFollowRequest(c.encoder)
		decodeResponse = DecodeFollowResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v any) (any, error) {
		req, err := c.BuildFollowRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		err = encodeRequest(req, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.FollowDoer.Do(req)
		if err != nil {
			return nil, goahttp.ErrRequestError("users", "Follow", err)
		}
		return decodeResponse(resp)
	}
}

// Unfollow returns an endpoint that makes HTTP requests to the users service
// Unfollow server.
func (c *Client) Unfollow() goa.Endpoint {
	var (
		decodeResponse = DecodeUnfollowResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v any) (any, error) {
		req, err := c.BuildUnfollowRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.UnfollowDoer.Do(req)
		if err != nil {
			return nil, goahttp.ErrRequestError("users", "Unfollow", err)
		}
		return decodeResponse(resp)
	}
}

// GetFollowers returns an endpoint that makes HTTP requests to the users
// service GetFollowers server.
func (c *Client) GetFollowers() goa.Endpoint {
	var (
		decodeResponse = DecodeGetFollowersResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v any) (any, error) {
		req, err := c.BuildGetFollowersRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.GetFollowersDoer.Do(req)
		if err != nil {
			return nil, goahttp.ErrRequestError("users", "GetFollowers", err)
		}
		return decodeResponse(resp)
	}
}

// GetFollowings returns an endpoint that makes HTTP requests to the users
// service GetFollowings server.
func (c *Client) GetFollowings() goa.Endpoint {
	var (
		decodeResponse = DecodeGetFollowingsResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v any) (any, error) {
		req, err := c.BuildGetFollowingsRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.GetFollowingsDoer.Do(req)
		if err != nil {
			return nil, goahttp.ErrRequestError("users", "GetFollowings", err)
		}
		return decodeResponse(resp)
	}
}

// Mute returns an endpoint that makes HTTP requests to the users service Mute
// server.
func (c *Client) Mute() goa.Endpoint {
	var (
		encodeRequest  = EncodeMuteRequest(c.encoder)
		decodeResponse = DecodeMuteResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v any) (any, error) {
		req, err := c.BuildMuteRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		err = encodeRequest(req, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.MuteDoer.Do(req)
		if err != nil {
			return nil, goahttp.ErrRequestError("users", "Mute", err)
		}
		return decodeResponse(resp)
	}
}

// Unmute returns an endpoint that makes HTTP requests to the users service
// Unmute server.
func (c *Client) Unmute() goa.Endpoint {
	var (
		decodeResponse = DecodeUnmuteResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v any) (any, error) {
		req, err := c.BuildUnmuteRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.UnmuteDoer.Do(req)
		if err != nil {
			return nil, goahttp.ErrRequestError("users", "Unmute", err)
		}
		return decodeResponse(resp)
	}
}

// Block returns an endpoint that makes HTTP requests to the users service
// Block server.
func (c *Client) Block() goa.Endpoint {
	var (
		encodeRequest  = EncodeBlockRequest(c.encoder)
		decodeResponse = DecodeBlockResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v any) (any, error) {
		req, err := c.BuildBlockRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		err = encodeRequest(req, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.BlockDoer.Do(req)
		if err != nil {
			return nil, goahttp.ErrRequestError("users", "Block", err)
		}
		return decodeResponse(resp)
	}
}

// Unblock returns an endpoint that makes HTTP requests to the users service
// Unblock server.
func (c *Client) Unblock() goa.Endpoint {
	var (
		decodeResponse = DecodeUnblockResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v any) (any, error) {
		req, err := c.BuildUnblockRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.UnblockDoer.Do(req)
		if err != nil {
			return nil, goahttp.ErrRequestError("users", "Unblock", err)
		}
		return decodeResponse(resp)
	}
}
