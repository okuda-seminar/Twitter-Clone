// Code generated by goa v3.14.0, DO NOT EDIT.
//
// users HTTP client CLI support package
//
// Command:
// $ goa gen users/design

package client

import (
	"encoding/json"
	"fmt"
	"strconv"
	users "users/gen/users"
)

// BuildCreateUserPayload builds the payload for the users CreateUser endpoint
// from CLI flags.
func BuildCreateUserPayload(usersCreateUserBody string) (*users.CreateUserPayload, error) {
	var err error
	var body CreateUserRequestBody
	{
		err = json.Unmarshal([]byte(usersCreateUserBody), &body)
		if err != nil {
			return nil, fmt.Errorf("invalid JSON for body, \nerror: %s, \nexample of valid JSON:\n%s", err, "'{\n      \"display_name\": \"Qui error inventore.\",\n      \"username\": \"Aspernatur quam repellat dolor laboriosam ut.\"\n   }'")
		}
	}
	v := &users.CreateUserPayload{
		Username:    body.Username,
		DisplayName: body.DisplayName,
	}

	return v, nil
}

// BuildDeleteUserPayload builds the payload for the users DeleteUser endpoint
// from CLI flags.
func BuildDeleteUserPayload(usersDeleteUserBody string) (*users.DeleteUserPayload, error) {
	var err error
	var body DeleteUserRequestBody
	{
		err = json.Unmarshal([]byte(usersDeleteUserBody), &body)
		if err != nil {
			return nil, fmt.Errorf("invalid JSON for body, \nerror: %s, \nexample of valid JSON:\n%s", err, "'{\n      \"id\": 4605757074257909868\n   }'")
		}
	}
	v := &users.DeleteUserPayload{
		ID: body.ID,
	}

	return v, nil
}

// BuildFindUserByIDPayload builds the payload for the users FindUserByID
// endpoint from CLI flags.
func BuildFindUserByIDPayload(usersFindUserByIDID string) (*users.FindUserByIDPayload, error) {
	var err error
	var id int
	{
		var v int64
		v, err = strconv.ParseInt(usersFindUserByIDID, 10, strconv.IntSize)
		id = int(v)
		if err != nil {
			return nil, fmt.Errorf("invalid value for id, must be INT")
		}
	}
	v := &users.FindUserByIDPayload{}
	v.ID = id

	return v, nil
}

// BuildUpdateUsernamePayload builds the payload for the users UpdateUsername
// endpoint from CLI flags.
func BuildUpdateUsernamePayload(usersUpdateUsernameBody string, usersUpdateUsernameID string) (*users.UpdateUsernamePayload, error) {
	var err error
	var body UpdateUsernameRequestBody
	{
		err = json.Unmarshal([]byte(usersUpdateUsernameBody), &body)
		if err != nil {
			return nil, fmt.Errorf("invalid JSON for body, \nerror: %s, \nexample of valid JSON:\n%s", err, "'{\n      \"username\": \"Odit et omnis placeat similique voluptatem id.\"\n   }'")
		}
	}
	var id int
	{
		var v int64
		v, err = strconv.ParseInt(usersUpdateUsernameID, 10, strconv.IntSize)
		id = int(v)
		if err != nil {
			return nil, fmt.Errorf("invalid value for id, must be INT")
		}
	}
	v := &users.UpdateUsernamePayload{
		Username: body.Username,
	}
	v.ID = id

	return v, nil
}

// BuildUpdateBioPayload builds the payload for the users UpdateBio endpoint
// from CLI flags.
func BuildUpdateBioPayload(usersUpdateBioBody string, usersUpdateBioID string) (*users.UpdateBioPayload, error) {
	var err error
	var body UpdateBioRequestBody
	{
		err = json.Unmarshal([]byte(usersUpdateBioBody), &body)
		if err != nil {
			return nil, fmt.Errorf("invalid JSON for body, \nerror: %s, \nexample of valid JSON:\n%s", err, "'{\n      \"bio\": \"Voluptas nobis omnis.\"\n   }'")
		}
	}
	var id int
	{
		var v int64
		v, err = strconv.ParseInt(usersUpdateBioID, 10, strconv.IntSize)
		id = int(v)
		if err != nil {
			return nil, fmt.Errorf("invalid value for id, must be INT")
		}
	}
	v := &users.UpdateBioPayload{
		Bio: body.Bio,
	}
	v.ID = id

	return v, nil
}

// BuildFollowPayload builds the payload for the users Follow endpoint from CLI
// flags.
func BuildFollowPayload(usersFollowBody string) (*users.FollowPayload, error) {
	var err error
	var body FollowRequestBody
	{
		err = json.Unmarshal([]byte(usersFollowBody), &body)
		if err != nil {
			return nil, fmt.Errorf("invalid JSON for body, \nerror: %s, \nexample of valid JSON:\n%s", err, "'{\n      \"followee_id\": 8492160358191620196,\n      \"follower_id\": 6881001417419968319\n   }'")
		}
	}
	v := &users.FollowPayload{
		FollowerID: body.FollowerID,
		FolloweeID: body.FolloweeID,
	}

	return v, nil
}

// BuildUnfollowPayload builds the payload for the users Unfollow endpoint from
// CLI flags.
func BuildUnfollowPayload(usersUnfollowBody string) (*users.UnfollowPayload, error) {
	var err error
	var body UnfollowRequestBody
	{
		err = json.Unmarshal([]byte(usersUnfollowBody), &body)
		if err != nil {
			return nil, fmt.Errorf("invalid JSON for body, \nerror: %s, \nexample of valid JSON:\n%s", err, "'{\n      \"followee_id\": 6202834779766302284,\n      \"follower_id\": 4698722160625222812\n   }'")
		}
	}
	v := &users.UnfollowPayload{
		FollowerID: body.FollowerID,
		FolloweeID: body.FolloweeID,
	}

	return v, nil
}

// BuildGetFollowersPayload builds the payload for the users GetFollowers
// endpoint from CLI flags.
func BuildGetFollowersPayload(usersGetFollowersID string) (*users.GetFollowersPayload, error) {
	var err error
	var id int
	{
		var v int64
		v, err = strconv.ParseInt(usersGetFollowersID, 10, strconv.IntSize)
		id = int(v)
		if err != nil {
			return nil, fmt.Errorf("invalid value for id, must be INT")
		}
	}
	v := &users.GetFollowersPayload{}
	v.ID = id

	return v, nil
}

// BuildGetFollowingsPayload builds the payload for the users GetFollowings
// endpoint from CLI flags.
func BuildGetFollowingsPayload(usersGetFollowingsID string) (*users.GetFollowingsPayload, error) {
	var err error
	var id int
	{
		var v int64
		v, err = strconv.ParseInt(usersGetFollowingsID, 10, strconv.IntSize)
		id = int(v)
		if err != nil {
			return nil, fmt.Errorf("invalid value for id, must be INT")
		}
	}
	v := &users.GetFollowingsPayload{}
	v.ID = id

	return v, nil
}
