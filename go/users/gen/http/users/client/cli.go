// Code generated by goa v3.14.0, DO NOT EDIT.
//
// users HTTP client CLI support package
//
// Command:
// $ goa gen users/design

package client

import (
	"encoding/json"
	"fmt"
	users "users/gen/users"

	goa "goa.design/goa/v3/pkg"
)

// BuildCreateUserPayload builds the payload for the users CreateUser endpoint
// from CLI flags.
func BuildCreateUserPayload(usersCreateUserBody string) (*users.CreateUserPayload, error) {
	var err error
	var body CreateUserRequestBody
	{
		err = json.Unmarshal([]byte(usersCreateUserBody), &body)
		if err != nil {
			return nil, fmt.Errorf("invalid JSON for body, \nerror: %s, \nexample of valid JSON:\n%s", err, "'{\n      \"display_name\": \"Saepe sit.\",\n      \"username\": \"Non vitae.\"\n   }'")
		}
	}
	v := &users.CreateUserPayload{
		Username:    body.Username,
		DisplayName: body.DisplayName,
	}

	return v, nil
}

// BuildDeleteUserPayload builds the payload for the users DeleteUser endpoint
// from CLI flags.
func BuildDeleteUserPayload(usersDeleteUserBody string) (*users.DeleteUserPayload, error) {
	var err error
	var body DeleteUserRequestBody
	{
		err = json.Unmarshal([]byte(usersDeleteUserBody), &body)
		if err != nil {
			return nil, fmt.Errorf("invalid JSON for body, \nerror: %s, \nexample of valid JSON:\n%s", err, "'{\n      \"id\": \"5387eca1-261a-11ef-b69d-0242ac120003\"\n   }'")
		}
		err = goa.MergeErrors(err, goa.ValidateFormat("body.id", body.ID, goa.FormatUUID))
		if err != nil {
			return nil, err
		}
	}
	v := &users.DeleteUserPayload{
		ID: body.ID,
	}

	return v, nil
}

// BuildFindUserByIDPayload builds the payload for the users FindUserByID
// endpoint from CLI flags.
func BuildFindUserByIDPayload(usersFindUserByIDID string) (*users.FindUserByIDPayload, error) {
	var err error
	var id string
	{
		id = usersFindUserByIDID
		err = goa.MergeErrors(err, goa.ValidateFormat("id", id, goa.FormatUUID))
		if err != nil {
			return nil, err
		}
	}
	v := &users.FindUserByIDPayload{}
	v.ID = id

	return v, nil
}

// BuildUpdateUsernamePayload builds the payload for the users UpdateUsername
// endpoint from CLI flags.
func BuildUpdateUsernamePayload(usersUpdateUsernameBody string, usersUpdateUsernameID string) (*users.UpdateUsernamePayload, error) {
	var err error
	var body UpdateUsernameRequestBody
	{
		err = json.Unmarshal([]byte(usersUpdateUsernameBody), &body)
		if err != nil {
			return nil, fmt.Errorf("invalid JSON for body, \nerror: %s, \nexample of valid JSON:\n%s", err, "'{\n      \"username\": \"Odio quis assumenda voluptate sit incidunt.\"\n   }'")
		}
	}
	var id string
	{
		id = usersUpdateUsernameID
		err = goa.MergeErrors(err, goa.ValidateFormat("id", id, goa.FormatUUID))
		if err != nil {
			return nil, err
		}
	}
	v := &users.UpdateUsernamePayload{
		Username: body.Username,
	}
	v.ID = id

	return v, nil
}

// BuildUpdateBioPayload builds the payload for the users UpdateBio endpoint
// from CLI flags.
func BuildUpdateBioPayload(usersUpdateBioBody string, usersUpdateBioID string) (*users.UpdateBioPayload, error) {
	var err error
	var body UpdateBioRequestBody
	{
		err = json.Unmarshal([]byte(usersUpdateBioBody), &body)
		if err != nil {
			return nil, fmt.Errorf("invalid JSON for body, \nerror: %s, \nexample of valid JSON:\n%s", err, "'{\n      \"bio\": \"Molestias fugit quod nemo.\"\n   }'")
		}
	}
	var id string
	{
		id = usersUpdateBioID
		err = goa.MergeErrors(err, goa.ValidateFormat("id", id, goa.FormatUUID))
		if err != nil {
			return nil, err
		}
	}
	v := &users.UpdateBioPayload{
		Bio: body.Bio,
	}
	v.ID = id

	return v, nil
}

// BuildFollowPayload builds the payload for the users Follow endpoint from CLI
// flags.
func BuildFollowPayload(usersFollowBody string) (*users.FollowPayload, error) {
	var err error
	var body FollowRequestBody
	{
		err = json.Unmarshal([]byte(usersFollowBody), &body)
		if err != nil {
			return nil, fmt.Errorf("invalid JSON for body, \nerror: %s, \nexample of valid JSON:\n%s", err, "'{\n      \"followee_id\": \"53883465-261a-11ef-b69d-0242ac120003\",\n      \"follower_id\": \"5388338f-261a-11ef-b69d-0242ac120003\"\n   }'")
		}
		err = goa.MergeErrors(err, goa.ValidateFormat("body.follower_id", body.FollowerID, goa.FormatUUID))
		err = goa.MergeErrors(err, goa.ValidateFormat("body.followee_id", body.FolloweeID, goa.FormatUUID))
		if err != nil {
			return nil, err
		}
	}
	v := &users.FollowPayload{
		FollowerID: body.FollowerID,
		FolloweeID: body.FolloweeID,
	}

	return v, nil
}

// BuildUnfollowPayload builds the payload for the users Unfollow endpoint from
// CLI flags.
func BuildUnfollowPayload(usersUnfollowBody string) (*users.UnfollowPayload, error) {
	var err error
	var body UnfollowRequestBody
	{
		err = json.Unmarshal([]byte(usersUnfollowBody), &body)
		if err != nil {
			return nil, fmt.Errorf("invalid JSON for body, \nerror: %s, \nexample of valid JSON:\n%s", err, "'{\n      \"followee_id\": \"53883fc2-261a-11ef-b69d-0242ac120003\",\n      \"follower_id\": \"53883ef9-261a-11ef-b69d-0242ac120003\"\n   }'")
		}
		err = goa.MergeErrors(err, goa.ValidateFormat("body.follower_id", body.FollowerID, goa.FormatUUID))
		err = goa.MergeErrors(err, goa.ValidateFormat("body.followee_id", body.FolloweeID, goa.FormatUUID))
		if err != nil {
			return nil, err
		}
	}
	v := &users.UnfollowPayload{
		FollowerID: body.FollowerID,
		FolloweeID: body.FolloweeID,
	}

	return v, nil
}

// BuildGetFollowersPayload builds the payload for the users GetFollowers
// endpoint from CLI flags.
func BuildGetFollowersPayload(usersGetFollowersID string) (*users.GetFollowersPayload, error) {
	var err error
	var id string
	{
		id = usersGetFollowersID
		err = goa.MergeErrors(err, goa.ValidateFormat("id", id, goa.FormatUUID))
		if err != nil {
			return nil, err
		}
	}
	v := &users.GetFollowersPayload{}
	v.ID = id

	return v, nil
}

// BuildGetFollowingsPayload builds the payload for the users GetFollowings
// endpoint from CLI flags.
func BuildGetFollowingsPayload(usersGetFollowingsID string) (*users.GetFollowingsPayload, error) {
	var err error
	var id string
	{
		id = usersGetFollowingsID
		err = goa.MergeErrors(err, goa.ValidateFormat("id", id, goa.FormatUUID))
		if err != nil {
			return nil, err
		}
	}
	v := &users.GetFollowingsPayload{}
	v.ID = id

	return v, nil
}

// BuildMutePayload builds the payload for the users Mute endpoint from CLI
// flags.
func BuildMutePayload(usersMuteBody string) (*users.MutePayload, error) {
	var err error
	var body MuteRequestBody
	{
		err = json.Unmarshal([]byte(usersMuteBody), &body)
		if err != nil {
			return nil, fmt.Errorf("invalid JSON for body, \nerror: %s, \nexample of valid JSON:\n%s", err, "'{\n      \"muted_user_id\": \"538877e2-261a-11ef-b69d-0242ac120003\",\n      \"muting_user_id\": \"5388791e-261a-11ef-b69d-0242ac120003\"\n   }'")
		}
		err = goa.MergeErrors(err, goa.ValidateFormat("body.muted_user_id", body.MutedUserID, goa.FormatUUID))
		err = goa.MergeErrors(err, goa.ValidateFormat("body.muting_user_id", body.MutingUserID, goa.FormatUUID))
		if err != nil {
			return nil, err
		}
	}
	v := &users.MutePayload{
		MutedUserID:  body.MutedUserID,
		MutingUserID: body.MutingUserID,
	}

	return v, nil
}

// BuildUnmutePayload builds the payload for the users Unmute endpoint from CLI
// flags.
func BuildUnmutePayload(usersUnmuteBody string) (*users.UnmutePayload, error) {
	var err error
	var body UnmuteRequestBody
	{
		err = json.Unmarshal([]byte(usersUnmuteBody), &body)
		if err != nil {
			return nil, fmt.Errorf("invalid JSON for body, \nerror: %s, \nexample of valid JSON:\n%s", err, "'{\n      \"muted_user_id\": \"5388ae5c-261a-11ef-b69d-0242ac120003\",\n      \"muting_user_id\": \"5388af31-261a-11ef-b69d-0242ac120003\"\n   }'")
		}
		err = goa.MergeErrors(err, goa.ValidateFormat("body.muted_user_id", body.MutedUserID, goa.FormatUUID))
		err = goa.MergeErrors(err, goa.ValidateFormat("body.muting_user_id", body.MutingUserID, goa.FormatUUID))
		if err != nil {
			return nil, err
		}
	}
	v := &users.UnmutePayload{
		MutedUserID:  body.MutedUserID,
		MutingUserID: body.MutingUserID,
	}

	return v, nil
}

// BuildBlockPayload builds the payload for the users Block endpoint from CLI
// flags.
func BuildBlockPayload(usersBlockBody string) (*users.BlockPayload, error) {
	var err error
	var body BlockRequestBody
	{
		err = json.Unmarshal([]byte(usersBlockBody), &body)
		if err != nil {
			return nil, fmt.Errorf("invalid JSON for body, \nerror: %s, \nexample of valid JSON:\n%s", err, "'{\n      \"blocked_user_id\": \"5388bac0-261a-11ef-b69d-0242ac120003\",\n      \"blocking_user_id\": \"5388bbb5-261a-11ef-b69d-0242ac120003\"\n   }'")
		}
		err = goa.MergeErrors(err, goa.ValidateFormat("body.blocked_user_id", body.BlockedUserID, goa.FormatUUID))
		err = goa.MergeErrors(err, goa.ValidateFormat("body.blocking_user_id", body.BlockingUserID, goa.FormatUUID))
		if err != nil {
			return nil, err
		}
	}
	v := &users.BlockPayload{
		BlockedUserID:  body.BlockedUserID,
		BlockingUserID: body.BlockingUserID,
	}

	return v, nil
}

// BuildUnblockPayload builds the payload for the users Unblock endpoint from
// CLI flags.
func BuildUnblockPayload(usersUnblockBody string) (*users.UnblockPayload, error) {
	var err error
	var body UnblockRequestBody
	{
		err = json.Unmarshal([]byte(usersUnblockBody), &body)
		if err != nil {
			return nil, fmt.Errorf("invalid JSON for body, \nerror: %s, \nexample of valid JSON:\n%s", err, "'{\n      \"blocked_user_id\": \"5388c713-261a-11ef-b69d-0242ac120003\",\n      \"blocking_user_id\": \"5388c7df-261a-11ef-b69d-0242ac120003\"\n   }'")
		}
		err = goa.MergeErrors(err, goa.ValidateFormat("body.blocked_user_id", body.BlockedUserID, goa.FormatUUID))
		err = goa.MergeErrors(err, goa.ValidateFormat("body.blocking_user_id", body.BlockingUserID, goa.FormatUUID))
		if err != nil {
			return nil, err
		}
	}
	v := &users.UnblockPayload{
		BlockedUserID:  body.BlockedUserID,
		BlockingUserID: body.BlockingUserID,
	}

	return v, nil
}
