// Code generated by goa v3.14.0, DO NOT EDIT.
//
// users HTTP client encoders and decoders
//
// Command:
// $ goa gen users/design

package client

import (
	"bytes"
	"context"
	"fmt"
	"io"
	"net/http"
	"net/url"
	users "users/gen/users"

	goahttp "goa.design/goa/v3/http"
	goa "goa.design/goa/v3/pkg"
)

// BuildCreateUserRequest instantiates a HTTP request object with method and
// path set to call the "users" service "CreateUser" endpoint
func (c *Client) BuildCreateUserRequest(ctx context.Context, v any) (*http.Request, error) {
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: CreateUserUsersPath()}
	req, err := http.NewRequest("POST", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("users", "CreateUser", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeCreateUserRequest returns an encoder for requests sent to the users
// CreateUser server.
func EncodeCreateUserRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, any) error {
	return func(req *http.Request, v any) error {
		p, ok := v.(*users.CreateUserPayload)
		if !ok {
			return goahttp.ErrInvalidType("users", "CreateUser", "*users.CreateUserPayload", v)
		}
		body := NewCreateUserRequestBody(p)
		if err := encoder(req).Encode(&body); err != nil {
			return goahttp.ErrEncodingError("users", "CreateUser", err)
		}
		return nil
	}
}

// DecodeCreateUserResponse returns a decoder for responses returned by the
// users CreateUser endpoint. restoreBody controls whether the response body
// should be restored after having been read.
// DecodeCreateUserResponse may return the following errors:
//   - "BadRequest" (type *goa.ServiceError): http.StatusBadRequest
//   - error: internal error
func DecodeCreateUserResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (any, error) {
	return func(resp *http.Response) (any, error) {
		if restoreBody {
			b, err := io.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = io.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = io.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				body CreateUserResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("users", "CreateUser", err)
			}
			err = ValidateCreateUserResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("users", "CreateUser", err)
			}
			res := NewCreateUserUserOK(&body)
			return res, nil
		case http.StatusBadRequest:
			var (
				body CreateUserBadRequestResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("users", "CreateUser", err)
			}
			err = ValidateCreateUserBadRequestResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("users", "CreateUser", err)
			}
			return nil, NewCreateUserBadRequest(&body)
		default:
			body, _ := io.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("users", "CreateUser", resp.StatusCode, string(body))
		}
	}
}

// BuildDeleteUserRequest instantiates a HTTP request object with method and
// path set to call the "users" service "DeleteUser" endpoint
func (c *Client) BuildDeleteUserRequest(ctx context.Context, v any) (*http.Request, error) {
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: DeleteUserUsersPath()}
	req, err := http.NewRequest("DELETE", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("users", "DeleteUser", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeDeleteUserRequest returns an encoder for requests sent to the users
// DeleteUser server.
func EncodeDeleteUserRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, any) error {
	return func(req *http.Request, v any) error {
		p, ok := v.(*users.DeleteUserPayload)
		if !ok {
			return goahttp.ErrInvalidType("users", "DeleteUser", "*users.DeleteUserPayload", v)
		}
		body := NewDeleteUserRequestBody(p)
		if err := encoder(req).Encode(&body); err != nil {
			return goahttp.ErrEncodingError("users", "DeleteUser", err)
		}
		return nil
	}
}

// DecodeDeleteUserResponse returns a decoder for responses returned by the
// users DeleteUser endpoint. restoreBody controls whether the response body
// should be restored after having been read.
// DecodeDeleteUserResponse may return the following errors:
//   - "NotFound" (type *goa.ServiceError): http.StatusNotFound
//   - "BadRequest" (type *goa.ServiceError): http.StatusBadRequest
//   - error: internal error
func DecodeDeleteUserResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (any, error) {
	return func(resp *http.Response) (any, error) {
		if restoreBody {
			b, err := io.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = io.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = io.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			return nil, nil
		case http.StatusNotFound:
			var (
				body DeleteUserNotFoundResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("users", "DeleteUser", err)
			}
			err = ValidateDeleteUserNotFoundResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("users", "DeleteUser", err)
			}
			return nil, NewDeleteUserNotFound(&body)
		case http.StatusBadRequest:
			var (
				body DeleteUserBadRequestResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("users", "DeleteUser", err)
			}
			err = ValidateDeleteUserBadRequestResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("users", "DeleteUser", err)
			}
			return nil, NewDeleteUserBadRequest(&body)
		default:
			body, _ := io.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("users", "DeleteUser", resp.StatusCode, string(body))
		}
	}
}

// BuildFindUserByIDRequest instantiates a HTTP request object with method and
// path set to call the "users" service "FindUserByID" endpoint
func (c *Client) BuildFindUserByIDRequest(ctx context.Context, v any) (*http.Request, error) {
	var (
		id int
	)
	{
		p, ok := v.(*users.FindUserByIDPayload)
		if !ok {
			return nil, goahttp.ErrInvalidType("users", "FindUserByID", "*users.FindUserByIDPayload", v)
		}
		id = p.ID
	}
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: FindUserByIDUsersPath(id)}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("users", "FindUserByID", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// DecodeFindUserByIDResponse returns a decoder for responses returned by the
// users FindUserByID endpoint. restoreBody controls whether the response body
// should be restored after having been read.
// DecodeFindUserByIDResponse may return the following errors:
//   - "NotFound" (type *goa.ServiceError): http.StatusNotFound
//   - error: internal error
func DecodeFindUserByIDResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (any, error) {
	return func(resp *http.Response) (any, error) {
		if restoreBody {
			b, err := io.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = io.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = io.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				body FindUserByIDResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("users", "FindUserByID", err)
			}
			err = ValidateFindUserByIDResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("users", "FindUserByID", err)
			}
			res := NewFindUserByIDUserOK(&body)
			return res, nil
		case http.StatusNotFound:
			var (
				body FindUserByIDNotFoundResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("users", "FindUserByID", err)
			}
			err = ValidateFindUserByIDNotFoundResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("users", "FindUserByID", err)
			}
			return nil, NewFindUserByIDNotFound(&body)
		default:
			body, _ := io.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("users", "FindUserByID", resp.StatusCode, string(body))
		}
	}
}

// BuildUpdateUsernameRequest instantiates a HTTP request object with method
// and path set to call the "users" service "UpdateUsername" endpoint
func (c *Client) BuildUpdateUsernameRequest(ctx context.Context, v any) (*http.Request, error) {
	var (
		id int
	)
	{
		p, ok := v.(*users.UpdateUsernamePayload)
		if !ok {
			return nil, goahttp.ErrInvalidType("users", "UpdateUsername", "*users.UpdateUsernamePayload", v)
		}
		id = p.ID
	}
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: UpdateUsernameUsersPath(id)}
	req, err := http.NewRequest("POST", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("users", "UpdateUsername", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeUpdateUsernameRequest returns an encoder for requests sent to the
// users UpdateUsername server.
func EncodeUpdateUsernameRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, any) error {
	return func(req *http.Request, v any) error {
		p, ok := v.(*users.UpdateUsernamePayload)
		if !ok {
			return goahttp.ErrInvalidType("users", "UpdateUsername", "*users.UpdateUsernamePayload", v)
		}
		body := NewUpdateUsernameRequestBody(p)
		if err := encoder(req).Encode(&body); err != nil {
			return goahttp.ErrEncodingError("users", "UpdateUsername", err)
		}
		return nil
	}
}

// DecodeUpdateUsernameResponse returns a decoder for responses returned by the
// users UpdateUsername endpoint. restoreBody controls whether the response
// body should be restored after having been read.
// DecodeUpdateUsernameResponse may return the following errors:
//   - "NotFound" (type *goa.ServiceError): http.StatusNotFound
//   - "BadRequest" (type *goa.ServiceError): http.StatusBadRequest
//   - error: internal error
func DecodeUpdateUsernameResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (any, error) {
	return func(resp *http.Response) (any, error) {
		if restoreBody {
			b, err := io.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = io.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = io.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			return nil, nil
		case http.StatusNotFound:
			var (
				body UpdateUsernameNotFoundResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("users", "UpdateUsername", err)
			}
			err = ValidateUpdateUsernameNotFoundResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("users", "UpdateUsername", err)
			}
			return nil, NewUpdateUsernameNotFound(&body)
		case http.StatusBadRequest:
			var (
				body UpdateUsernameBadRequestResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("users", "UpdateUsername", err)
			}
			err = ValidateUpdateUsernameBadRequestResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("users", "UpdateUsername", err)
			}
			return nil, NewUpdateUsernameBadRequest(&body)
		default:
			body, _ := io.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("users", "UpdateUsername", resp.StatusCode, string(body))
		}
	}
}

// BuildUpdateBioRequest instantiates a HTTP request object with method and
// path set to call the "users" service "UpdateBio" endpoint
func (c *Client) BuildUpdateBioRequest(ctx context.Context, v any) (*http.Request, error) {
	var (
		id int
	)
	{
		p, ok := v.(*users.UpdateBioPayload)
		if !ok {
			return nil, goahttp.ErrInvalidType("users", "UpdateBio", "*users.UpdateBioPayload", v)
		}
		id = p.ID
	}
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: UpdateBioUsersPath(id)}
	req, err := http.NewRequest("POST", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("users", "UpdateBio", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeUpdateBioRequest returns an encoder for requests sent to the users
// UpdateBio server.
func EncodeUpdateBioRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, any) error {
	return func(req *http.Request, v any) error {
		p, ok := v.(*users.UpdateBioPayload)
		if !ok {
			return goahttp.ErrInvalidType("users", "UpdateBio", "*users.UpdateBioPayload", v)
		}
		body := NewUpdateBioRequestBody(p)
		if err := encoder(req).Encode(&body); err != nil {
			return goahttp.ErrEncodingError("users", "UpdateBio", err)
		}
		return nil
	}
}

// DecodeUpdateBioResponse returns a decoder for responses returned by the
// users UpdateBio endpoint. restoreBody controls whether the response body
// should be restored after having been read.
// DecodeUpdateBioResponse may return the following errors:
//   - "NotFound" (type *goa.ServiceError): http.StatusNotFound
//   - "BadRequest" (type *goa.ServiceError): http.StatusBadRequest
//   - error: internal error
func DecodeUpdateBioResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (any, error) {
	return func(resp *http.Response) (any, error) {
		if restoreBody {
			b, err := io.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = io.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = io.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			return nil, nil
		case http.StatusNotFound:
			var (
				body UpdateBioNotFoundResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("users", "UpdateBio", err)
			}
			err = ValidateUpdateBioNotFoundResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("users", "UpdateBio", err)
			}
			return nil, NewUpdateBioNotFound(&body)
		case http.StatusBadRequest:
			var (
				body UpdateBioBadRequestResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("users", "UpdateBio", err)
			}
			err = ValidateUpdateBioBadRequestResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("users", "UpdateBio", err)
			}
			return nil, NewUpdateBioBadRequest(&body)
		default:
			body, _ := io.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("users", "UpdateBio", resp.StatusCode, string(body))
		}
	}
}

// BuildFollowRequest instantiates a HTTP request object with method and path
// set to call the "users" service "Follow" endpoint
func (c *Client) BuildFollowRequest(ctx context.Context, v any) (*http.Request, error) {
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: FollowUsersPath()}
	req, err := http.NewRequest("POST", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("users", "Follow", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeFollowRequest returns an encoder for requests sent to the users Follow
// server.
func EncodeFollowRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, any) error {
	return func(req *http.Request, v any) error {
		p, ok := v.(*users.FollowPayload)
		if !ok {
			return goahttp.ErrInvalidType("users", "Follow", "*users.FollowPayload", v)
		}
		body := NewFollowRequestBody(p)
		if err := encoder(req).Encode(&body); err != nil {
			return goahttp.ErrEncodingError("users", "Follow", err)
		}
		return nil
	}
}

// DecodeFollowResponse returns a decoder for responses returned by the users
// Follow endpoint. restoreBody controls whether the response body should be
// restored after having been read.
// DecodeFollowResponse may return the following errors:
//   - "BadRequest" (type *goa.ServiceError): http.StatusBadRequest
//   - error: internal error
func DecodeFollowResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (any, error) {
	return func(resp *http.Response) (any, error) {
		if restoreBody {
			b, err := io.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = io.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = io.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			return nil, nil
		case http.StatusBadRequest:
			var (
				body FollowBadRequestResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("users", "Follow", err)
			}
			err = ValidateFollowBadRequestResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("users", "Follow", err)
			}
			return nil, NewFollowBadRequest(&body)
		default:
			body, _ := io.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("users", "Follow", resp.StatusCode, string(body))
		}
	}
}

// BuildUnfollowRequest instantiates a HTTP request object with method and path
// set to call the "users" service "Unfollow" endpoint
func (c *Client) BuildUnfollowRequest(ctx context.Context, v any) (*http.Request, error) {
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: UnfollowUsersPath()}
	req, err := http.NewRequest("DELETE", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("users", "Unfollow", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeUnfollowRequest returns an encoder for requests sent to the users
// Unfollow server.
func EncodeUnfollowRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, any) error {
	return func(req *http.Request, v any) error {
		p, ok := v.(*users.UnfollowPayload)
		if !ok {
			return goahttp.ErrInvalidType("users", "Unfollow", "*users.UnfollowPayload", v)
		}
		body := NewUnfollowRequestBody(p)
		if err := encoder(req).Encode(&body); err != nil {
			return goahttp.ErrEncodingError("users", "Unfollow", err)
		}
		return nil
	}
}

// DecodeUnfollowResponse returns a decoder for responses returned by the users
// Unfollow endpoint. restoreBody controls whether the response body should be
// restored after having been read.
// DecodeUnfollowResponse may return the following errors:
//   - "BadRequest" (type *goa.ServiceError): http.StatusBadRequest
//   - error: internal error
func DecodeUnfollowResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (any, error) {
	return func(resp *http.Response) (any, error) {
		if restoreBody {
			b, err := io.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = io.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = io.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			return nil, nil
		case http.StatusBadRequest:
			var (
				body UnfollowBadRequestResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("users", "Unfollow", err)
			}
			err = ValidateUnfollowBadRequestResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("users", "Unfollow", err)
			}
			return nil, NewUnfollowBadRequest(&body)
		default:
			body, _ := io.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("users", "Unfollow", resp.StatusCode, string(body))
		}
	}
}

// BuildGetFollowersRequest instantiates a HTTP request object with method and
// path set to call the "users" service "GetFollowers" endpoint
func (c *Client) BuildGetFollowersRequest(ctx context.Context, v any) (*http.Request, error) {
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: GetFollowersUsersPath()}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("users", "GetFollowers", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeGetFollowersRequest returns an encoder for requests sent to the users
// GetFollowers server.
func EncodeGetFollowersRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, any) error {
	return func(req *http.Request, v any) error {
		p, ok := v.(*users.GetFollowersPayload)
		if !ok {
			return goahttp.ErrInvalidType("users", "GetFollowers", "*users.GetFollowersPayload", v)
		}
		values := req.URL.Query()
		values.Add("id", fmt.Sprintf("%v", p.ID))
		req.URL.RawQuery = values.Encode()
		return nil
	}
}

// DecodeGetFollowersResponse returns a decoder for responses returned by the
// users GetFollowers endpoint. restoreBody controls whether the response body
// should be restored after having been read.
// DecodeGetFollowersResponse may return the following errors:
//   - "BadRequest" (type *goa.ServiceError): http.StatusBadRequest
//   - error: internal error
func DecodeGetFollowersResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (any, error) {
	return func(resp *http.Response) (any, error) {
		if restoreBody {
			b, err := io.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = io.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = io.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				body GetFollowersResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("users", "GetFollowers", err)
			}
			for _, e := range body {
				if e != nil {
					if err2 := ValidateUserResponse(e); err2 != nil {
						err = goa.MergeErrors(err, err2)
					}
				}
			}
			if err != nil {
				return nil, goahttp.ErrValidationError("users", "GetFollowers", err)
			}
			res := NewGetFollowersUserOK(body)
			return res, nil
		case http.StatusBadRequest:
			var (
				body GetFollowersBadRequestResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("users", "GetFollowers", err)
			}
			err = ValidateGetFollowersBadRequestResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("users", "GetFollowers", err)
			}
			return nil, NewGetFollowersBadRequest(&body)
		default:
			body, _ := io.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("users", "GetFollowers", resp.StatusCode, string(body))
		}
	}
}

// BuildGetFollowingsRequest instantiates a HTTP request object with method and
// path set to call the "users" service "GetFollowings" endpoint
func (c *Client) BuildGetFollowingsRequest(ctx context.Context, v any) (*http.Request, error) {
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: GetFollowingsUsersPath()}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("users", "GetFollowings", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeGetFollowingsRequest returns an encoder for requests sent to the users
// GetFollowings server.
func EncodeGetFollowingsRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, any) error {
	return func(req *http.Request, v any) error {
		p, ok := v.(*users.GetFollowingsPayload)
		if !ok {
			return goahttp.ErrInvalidType("users", "GetFollowings", "*users.GetFollowingsPayload", v)
		}
		values := req.URL.Query()
		values.Add("id", fmt.Sprintf("%v", p.ID))
		req.URL.RawQuery = values.Encode()
		return nil
	}
}

// DecodeGetFollowingsResponse returns a decoder for responses returned by the
// users GetFollowings endpoint. restoreBody controls whether the response body
// should be restored after having been read.
// DecodeGetFollowingsResponse may return the following errors:
//   - "BadRequest" (type *goa.ServiceError): http.StatusBadRequest
//   - error: internal error
func DecodeGetFollowingsResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (any, error) {
	return func(resp *http.Response) (any, error) {
		if restoreBody {
			b, err := io.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = io.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = io.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				body GetFollowingsResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("users", "GetFollowings", err)
			}
			for _, e := range body {
				if e != nil {
					if err2 := ValidateUserResponse(e); err2 != nil {
						err = goa.MergeErrors(err, err2)
					}
				}
			}
			if err != nil {
				return nil, goahttp.ErrValidationError("users", "GetFollowings", err)
			}
			res := NewGetFollowingsUserOK(body)
			return res, nil
		case http.StatusBadRequest:
			var (
				body GetFollowingsBadRequestResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("users", "GetFollowings", err)
			}
			err = ValidateGetFollowingsBadRequestResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("users", "GetFollowings", err)
			}
			return nil, NewGetFollowingsBadRequest(&body)
		default:
			body, _ := io.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("users", "GetFollowings", resp.StatusCode, string(body))
		}
	}
}

// unmarshalUserResponseToUsersUser builds a value of type *users.User from a
// value of type *UserResponse.
func unmarshalUserResponseToUsersUser(v *UserResponse) *users.User {
	res := &users.User{
		ID:          *v.ID,
		Username:    *v.Username,
		DisplayName: *v.DisplayName,
		Bio:         *v.Bio,
		CreatedAt:   *v.CreatedAt,
		UpdatedAt:   *v.UpdatedAt,
	}

	return res
}
