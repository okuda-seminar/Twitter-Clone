// Code generated by goa v3.15.2, DO NOT EDIT.
//
// notification HTTP server types
//
// Command:
// $ goa gen notification/design

package server

import (
	notification "notification/gen/notification"

	goa "goa.design/goa/v3/pkg"
)

// CreateTweetNotificationRequestBody is the type of the "notification" service
// "CreateTweetNotification" endpoint HTTP request body.
type CreateTweetNotificationRequestBody struct {
	TweetID *string `form:"tweet_id,omitempty" json:"tweet_id,omitempty" xml:"tweet_id,omitempty"`
	Text    *string `form:"text,omitempty" json:"text,omitempty" xml:"text,omitempty"`
}

// CreateTweetNotificationBadRequestResponseBody is the type of the
// "notification" service "CreateTweetNotification" endpoint HTTP response body
// for the "BadRequest" error.
type CreateTweetNotificationBadRequestResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// NewCreateTweetNotificationBadRequestResponseBody builds the HTTP response
// body from the result of the "CreateTweetNotification" endpoint of the
// "notification" service.
func NewCreateTweetNotificationBadRequestResponseBody(res *goa.ServiceError) *CreateTweetNotificationBadRequestResponseBody {
	body := &CreateTweetNotificationBadRequestResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewCreateTweetNotificationPayload builds a notification service
// CreateTweetNotification endpoint payload.
func NewCreateTweetNotificationPayload(body *CreateTweetNotificationRequestBody) *notification.CreateTweetNotificationPayload {
	v := &notification.CreateTweetNotificationPayload{
		TweetID: *body.TweetID,
		Text:    *body.Text,
	}

	return v
}

// ValidateCreateTweetNotificationRequestBody runs the validations defined on
// CreateTweetNotificationRequestBody
func ValidateCreateTweetNotificationRequestBody(body *CreateTweetNotificationRequestBody) (err error) {
	if body.TweetID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("tweet_id", "body"))
	}
	if body.Text == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("text", "body"))
	}
	return
}
