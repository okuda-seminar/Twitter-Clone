// Package openapi provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.5.0 DO NOT EDIT.
package openapi

import (
	"encoding/json"
	"time"

	"github.com/oapi-codegen/runtime"
)

const (
	BearerAuthScopes = "BearerAuth.Scopes"
)

// Defines values for GetUserPostsTimelineResponseType.
const (
	GetUserPostsTimelineResponseTypePost        GetUserPostsTimelineResponseType = "post"
	GetUserPostsTimelineResponseTypeQuoteRepost GetUserPostsTimelineResponseType = "quoteRepost"
	GetUserPostsTimelineResponseTypeRepost      GetUserPostsTimelineResponseType = "repost"
)

// BlockUserRequest defines model for block_user_request.
type BlockUserRequest struct {
	TargetUserId string `json:"target_user_id"`
}

// CreateFollowshipRequest defines model for create_followship_request.
type CreateFollowshipRequest struct {
	TargetUserID string `json:"targetUserID"`
}

// CreateFollowshipResponse defines model for create_followship_response.
type CreateFollowshipResponse struct {
	Message string `json:"message"`
}

// CreatePostRequest defines model for create_post_request.
type CreatePostRequest struct {
	Text string `json:"text"`
}

// CreatePostResponse Response when creating a timeline item.
type CreatePostResponse struct {
	AuthorId  string    `json:"authorId"`
	CreatedAt time.Time `json:"createdAt"`
	Id        string    `json:"id"`
	Text      string    `json:"text"`
	Type      string    `json:"type"`
}

// CreateQuoteRepostRequest defines model for create_quote_repost_request.
type CreateQuoteRepostRequest struct {
	PostId string `json:"post_id"`
	Text   string `json:"text"`
}

// CreateQuoteRepostResponse Response when creating a quote repost.
type CreateQuoteRepostResponse struct {
	QuoteRepost QuoteRepost `json:"quoteRepost"`
}

// CreateRepostRequest defines model for create_repost_request.
type CreateRepostRequest struct {
	PostId string `json:"post_id"`
}

// CreateRepostResponse defines model for create_repost_response.
type CreateRepostResponse = Repost

// CreateUserRequest defines model for create_user_request.
type CreateUserRequest struct {
	DisplayName string `json:"display_name"`
	Password    string `json:"password"`
	Username    string `json:"username"`
}

// CreateUserResponse defines model for create_user_response.
type CreateUserResponse struct {
	Token string `json:"token"`
	User  User   `json:"user"`
}

// DeleteFollowshipResponse defines model for delete_followship_response.
type DeleteFollowshipResponse struct {
	Message string `json:"message"`
}

// DeleteRepostRequest defines model for delete_repost_request.
type DeleteRepostRequest struct {
	RepostId string `json:"repost_id"`
}

// DeleteUserByIdResponse defines model for delete_user_by_id_response.
type DeleteUserByIdResponse struct {
	Message string `json:"message"`
}

// FindUserByIdResponse defines model for find_user_by_id_response.
type FindUserByIdResponse struct {
	Bio         string    `json:"bio"`
	CreatedAt   time.Time `json:"created_at"`
	DisplayName string    `json:"display_name"`
	Id          string    `json:"id"`
	IsPrivate   bool      `json:"is_private"`
	UpdatedAt   time.Time `json:"updated_at"`
	Username    string    `json:"username"`
}

// GetFolloweesByIdResponse Array of users who are followees of the specified user
type GetFolloweesByIdResponse = []User

// GetFollowersByIdResponse Array of users who are followers of the specified user
type GetFollowersByIdResponse = []User

// GetPostByPostIdResponse defines model for get_post_by_post_id_response.
type GetPostByPostIdResponse struct {
	union json.RawMessage
}

// GetReverseChronologicalHomeTimelineResponse Response when fetching timeline items for reverse chronological home timeline.
type GetReverseChronologicalHomeTimelineResponse = []GetReverseChronologicalHomeTimelineResponse_Item

// GetReverseChronologicalHomeTimelineResponse_Item defines model for get_reverse_chronological_home_timeline_response.Item.
type GetReverseChronologicalHomeTimelineResponse_Item struct {
	union json.RawMessage
}

// GetUserPostsTimelineResponse Response when fetching timeline items.
type GetUserPostsTimelineResponse = []struct {
	AuthorId     string    `json:"authorId"`
	CreatedAt    time.Time `json:"createdAt"`
	Id           string    `json:"id"`
	ParentPostId *struct {
		UUID  string `json:"UUID"`
		Valid bool   `json:"Valid"`
	} `json:"parentPostId,omitempty"`
	Text string                           `json:"text"`
	Type GetUserPostsTimelineResponseType `json:"type"`
}

// GetUserPostsTimelineResponseType defines model for GetUserPostsTimelineResponse.Type.
type GetUserPostsTimelineResponseType string

// LikePostRequest defines model for like_post_request.
type LikePostRequest struct {
	PostId string `json:"post_id"`
}

// LoginRequest defines model for login_request.
type LoginRequest struct {
	Password string `json:"password"`
	Username string `json:"username"`
}

// LoginResponse defines model for login_response.
type LoginResponse struct {
	Token string `json:"token"`
	User  User   `json:"user"`
}

// MuteUserRequest defines model for mute_user_request.
type MuteUserRequest struct {
	TargetUserId string `json:"target_user_id"`
}

// ParentPost defines model for parent_post.
type ParentPost struct {
	union json.RawMessage
}

// Post defines model for post.
type Post struct {
	AuthorId  string    `json:"authorId"`
	CreatedAt time.Time `json:"createdAt"`
	Id        string    `json:"id"`
	Text      string    `json:"text"`
	Type      string    `json:"type"`
}

// QuoteRepost defines model for quote_repost.
type QuoteRepost struct {
	AuthorId     string    `json:"authorId"`
	CreatedAt    time.Time `json:"createdAt"`
	Id           string    `json:"id"`
	ParentPostId struct {
		UUID  string `json:"UUID"`
		Valid bool   `json:"Valid"`
	} `json:"parentPostId"`
	Text string `json:"text"`
	Type string `json:"type"`
}

// QuoteRepostWithParent defines model for quote_repost_with_parent.
type QuoteRepostWithParent struct {
	AuthorId     string      `json:"authorId"`
	CreatedAt    time.Time   `json:"createdAt"`
	Id           string      `json:"id"`
	ParentPost   *ParentPost `json:"parentPost,omitempty"`
	ParentPostId struct {
		UUID  string `json:"UUID"`
		Valid bool   `json:"Valid"`
	} `json:"parentPostId"`
	Text string `json:"text"`
	Type string `json:"type"`
}

// Repost defines model for repost.
type Repost struct {
	AuthorId     string    `json:"authorId"`
	CreatedAt    time.Time `json:"createdAt"`
	Id           string    `json:"id"`
	ParentPostId struct {
		UUID  string `json:"UUID"`
		Valid bool   `json:"Valid"`
	} `json:"parentPostId"`
	Type string `json:"type"`
}

// RepostWithParent defines model for repost_with_parent.
type RepostWithParent struct {
	AuthorId     string      `json:"authorId"`
	CreatedAt    time.Time   `json:"createdAt"`
	Id           string      `json:"id"`
	ParentPost   *ParentPost `json:"parentPost,omitempty"`
	ParentPostId struct {
		UUID  string `json:"UUID"`
		Valid bool   `json:"Valid"`
	} `json:"parentPostId"`
	Type string `json:"type"`
}

// User defines model for user.
type User struct {
	Bio         string    `json:"bio"`
	CreatedAt   time.Time `json:"createdAt"`
	DisplayName string    `json:"displayName"`
	Id          string    `json:"id"`
	IsPrivate   bool      `json:"isPrivate"`
	UpdatedAt   time.Time `json:"updatedAt"`
	Username    string    `json:"username"`
}

// VerifySessionResponse defines model for verify_session_response.
type VerifySessionResponse struct {
	User User `json:"user"`
}

// LoginJSONRequestBody defines body for Login for application/json ContentType.
type LoginJSONRequestBody = LoginRequest

// CreateUserJSONRequestBody defines body for CreateUser for application/json ContentType.
type CreateUserJSONRequestBody = CreateUserRequest

// CreateFollowshipJSONRequestBody defines body for CreateFollowship for application/json ContentType.
type CreateFollowshipJSONRequestBody = CreateFollowshipRequest

// CreatePostJSONRequestBody defines body for CreatePost for application/json ContentType.
type CreatePostJSONRequestBody = CreatePostRequest

// CreateQuoteRepostJSONRequestBody defines body for CreateQuoteRepost for application/json ContentType.
type CreateQuoteRepostJSONRequestBody = CreateQuoteRepostRequest

// BlockUserJSONRequestBody defines body for BlockUser for application/json ContentType.
type BlockUserJSONRequestBody = BlockUserRequest

// LikePostJSONRequestBody defines body for LikePost for application/json ContentType.
type LikePostJSONRequestBody = LikePostRequest

// MuteUserJSONRequestBody defines body for MuteUser for application/json ContentType.
type MuteUserJSONRequestBody = MuteUserRequest

// CreateRepostJSONRequestBody defines body for CreateRepost for application/json ContentType.
type CreateRepostJSONRequestBody = CreateRepostRequest

// DeleteRepostJSONRequestBody defines body for DeleteRepost for application/json ContentType.
type DeleteRepostJSONRequestBody = DeleteRepostRequest

// AsPost returns the union data inside the GetPostByPostIdResponse as a Post
func (t GetPostByPostIdResponse) AsPost() (Post, error) {
	var body Post
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromPost overwrites any union data inside the GetPostByPostIdResponse as the provided Post
func (t *GetPostByPostIdResponse) FromPost(v Post) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergePost performs a merge with any union data inside the GetPostByPostIdResponse, using the provided Post
func (t *GetPostByPostIdResponse) MergePost(v Post) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsQuoteRepostWithParent returns the union data inside the GetPostByPostIdResponse as a QuoteRepostWithParent
func (t GetPostByPostIdResponse) AsQuoteRepostWithParent() (QuoteRepostWithParent, error) {
	var body QuoteRepostWithParent
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromQuoteRepostWithParent overwrites any union data inside the GetPostByPostIdResponse as the provided QuoteRepostWithParent
func (t *GetPostByPostIdResponse) FromQuoteRepostWithParent(v QuoteRepostWithParent) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeQuoteRepostWithParent performs a merge with any union data inside the GetPostByPostIdResponse, using the provided QuoteRepostWithParent
func (t *GetPostByPostIdResponse) MergeQuoteRepostWithParent(v QuoteRepostWithParent) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsRepostWithParent returns the union data inside the GetPostByPostIdResponse as a RepostWithParent
func (t GetPostByPostIdResponse) AsRepostWithParent() (RepostWithParent, error) {
	var body RepostWithParent
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromRepostWithParent overwrites any union data inside the GetPostByPostIdResponse as the provided RepostWithParent
func (t *GetPostByPostIdResponse) FromRepostWithParent(v RepostWithParent) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeRepostWithParent performs a merge with any union data inside the GetPostByPostIdResponse, using the provided RepostWithParent
func (t *GetPostByPostIdResponse) MergeRepostWithParent(v RepostWithParent) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t GetPostByPostIdResponse) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *GetPostByPostIdResponse) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsPost returns the union data inside the GetReverseChronologicalHomeTimelineResponse_Item as a Post
func (t GetReverseChronologicalHomeTimelineResponse_Item) AsPost() (Post, error) {
	var body Post
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromPost overwrites any union data inside the GetReverseChronologicalHomeTimelineResponse_Item as the provided Post
func (t *GetReverseChronologicalHomeTimelineResponse_Item) FromPost(v Post) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergePost performs a merge with any union data inside the GetReverseChronologicalHomeTimelineResponse_Item, using the provided Post
func (t *GetReverseChronologicalHomeTimelineResponse_Item) MergePost(v Post) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsRepost returns the union data inside the GetReverseChronologicalHomeTimelineResponse_Item as a Repost
func (t GetReverseChronologicalHomeTimelineResponse_Item) AsRepost() (Repost, error) {
	var body Repost
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromRepost overwrites any union data inside the GetReverseChronologicalHomeTimelineResponse_Item as the provided Repost
func (t *GetReverseChronologicalHomeTimelineResponse_Item) FromRepost(v Repost) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeRepost performs a merge with any union data inside the GetReverseChronologicalHomeTimelineResponse_Item, using the provided Repost
func (t *GetReverseChronologicalHomeTimelineResponse_Item) MergeRepost(v Repost) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsQuoteRepost returns the union data inside the GetReverseChronologicalHomeTimelineResponse_Item as a QuoteRepost
func (t GetReverseChronologicalHomeTimelineResponse_Item) AsQuoteRepost() (QuoteRepost, error) {
	var body QuoteRepost
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromQuoteRepost overwrites any union data inside the GetReverseChronologicalHomeTimelineResponse_Item as the provided QuoteRepost
func (t *GetReverseChronologicalHomeTimelineResponse_Item) FromQuoteRepost(v QuoteRepost) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeQuoteRepost performs a merge with any union data inside the GetReverseChronologicalHomeTimelineResponse_Item, using the provided QuoteRepost
func (t *GetReverseChronologicalHomeTimelineResponse_Item) MergeQuoteRepost(v QuoteRepost) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t GetReverseChronologicalHomeTimelineResponse_Item) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *GetReverseChronologicalHomeTimelineResponse_Item) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsPost returns the union data inside the ParentPost as a Post
func (t ParentPost) AsPost() (Post, error) {
	var body Post
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromPost overwrites any union data inside the ParentPost as the provided Post
func (t *ParentPost) FromPost(v Post) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergePost performs a merge with any union data inside the ParentPost, using the provided Post
func (t *ParentPost) MergePost(v Post) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsQuoteRepost returns the union data inside the ParentPost as a QuoteRepost
func (t ParentPost) AsQuoteRepost() (QuoteRepost, error) {
	var body QuoteRepost
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromQuoteRepost overwrites any union data inside the ParentPost as the provided QuoteRepost
func (t *ParentPost) FromQuoteRepost(v QuoteRepost) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeQuoteRepost performs a merge with any union data inside the ParentPost, using the provided QuoteRepost
func (t *ParentPost) MergeQuoteRepost(v QuoteRepost) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t ParentPost) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *ParentPost) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}
